{"version":3,"sources":["context/SudokuContext.js","components/puzzle/layout/GameSection.js","context/SettingsContext.js","components/puzzle/Timer.js","components/puzzle/Numbers.js","components/puzzle/layout/StatusSection.js","solver/sudoku.js","solver/UniqueSudoku.js","components/TitleTypography.js","components/DifficultyButton.js","components/CoffeeButton.js","components/Header.js","Game.js","themes/defaultTheme.js","App.js","serviceWorker.js","index.js"],"names":["SudokuContext","createContext","moment","SudokuProvider","children","useState","numberSelected","setNumberSelected","gameArray","setGameArray","timeGameStarted","setTimeGameStarted","fastMode","setFastMode","cellSelected","setCellSelected","initArray","setInitArray","won","setWon","colorFlash","setColorFlash","Provider","value","useSudokuContext","useContext","GameSection","props","rows","_selectedCell","indexOfArray","highlight","className","onClick","_unselectedCell","handleClick","map","row","column","_isCellSameAsSelectedCell","DIFFICULTY","SettingsContext","SettingsProvider","difficulty","setDifficulty","timeTurnStarted","setTimeTurnStarted","id","name","players","setPlayers","currentPlayer","setCurrentPlayer","currentTime","setCurrentTime","timeSetting","setTimeSetting","nextPlayer","length","useSettingsContext","Timer","useEffect","setTimeout","style","timeRemaining","diff","backgroundColor","Numbers","number","toString","onClickNumber","StatusSection","onClickNewGame","sudoku","ROWS","COLS","DIGITS","SQUARES","UNITS","SQUARE_UNITS_MAP","SQUARE_PEERS_MAP","BLANK_CHAR","BLANK_BOARD","generate","unique","easy","_force_range","NR_SQUARES","blank_board","i","candidates","_get_candidates_map","shuffled_squares","_shuffle","si","square","rand_candidate_idx","_rand_range","rand_candidate","_assign","single_candidates","push","_strip_dups","board","givens_idxs","nr_givens","target","parseInt","substr","solve","reverse","report","validate_board","_in","result","_search","solution","get_candidates","candidates_map","cur_row","candidate_map","squares_values_map","_get_square_vals_map","val","max_nr_candidates","nr_candidates","min_nr_candidates","min_candidates_square","min_candidates","vi","candidates_copy","JSON","parse","stringify","candidates_next","other_vals","replace","ovi","other_val","_eliminate","target_val","pi","peer","candidates_new","ui","unit","val_places","unit_square","squares_vals_map","_get_square_units_map","squares","units","square_unit_map","cur_square","cur_square_units","cur_unit","indexOf","_get_square_peers_map","units_map","square_peers_map","cur_square_peers","sui","cur_unit_square","_get_all_units","cols","ri","_cross","ci","row_squares","col_squares","rsi","csi","board_string_to_grid","board_string","board_grid_to_string","board_grid","r","c","print_board","display_string","console","log","a","b","ai","bi","v","seq","_first_true","shuffled","ti","max","min","Math","floor","random","seq_set","dup_map","e","nr","nullArray","_getIndexOfCell","box","cell","_getBoxCenter","_cellAvailable","tempInitArray","getUniqueSudoku","newDifficulty","temporaryInitArray","slice","temporarySolvedArray","str","forEach","index","solvedArray","minimumCells","maximumCells","totalCells","currentDifficulty","boxCounts","boxesAvailable","cellsAvailable","j","_generateUniqueSudoku","titleTheme","createMuiTheme","typography","fontFamily","useStyles","makeStyles","theme","title","flexGrow","fontSize","TitleTypography","classes","ThemeProvider","Typography","color","button","marginRight","cursor","palette","primary","main","DifficultyButton","buttonColor","Button","CoffeeButton","alert","root","header","borderBottom","minHeight","subheader","subheaderButton","difficultyContainer","Header","onChangeDifficulty","AppBar","position","elevation","Toolbar","size","variant","disableElevation","Game","mistakesMode","setMistakesMode","history","setHistory","setSolvedArray","overlay","setOverlay","_createNewGame","_fillCell","tempArray","tempHistory","every","cellIndex","_isSolved","clearWrongAnswer","onClickErase","finishCorrectAnswer","_userFillCell","triggerCorrectAnswer","triggerWrongAnswer","onClickCell","onChange","onClickUndo","pop","onClickHint","onClickMistakesMode","onClickFastMode","secondary","grey","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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BxE,EAASC,GAC5DE,EAAsBP,EAAOoF,sBAAsBhF,EACvBE,GAyvBzB,IC7tBPyH,EAAY,CACd,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAmCF,SAASC,EAAgBC,EAAKC,GAAO,IAAD,EA7BpC,SAAuBD,GAErB,OAAQA,GACN,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,IAUKE,CAAcF,GADA,mBAC7BrK,EAD6B,KACxBC,EADwB,KAGlC,OAAQqK,GACN,KAAK,EACHtK,IACAC,IACA,MAEF,KAAK,EACHD,IACA,MAEF,KAAK,EACHA,IACAC,IACA,MAEF,KAAK,EACHA,IACA,MAEF,KAAK,EACH,MAEF,KAAK,EACHA,IACA,MAEF,KAAK,EACHD,IACAC,IACA,MAEF,KAAK,EACHD,IACA,MAEF,KAAK,EACHA,IACAC,IAIJ,OAAa,EAAND,EAAUC,EAMnB,SAASuK,EAAeC,EAAeJ,EAAKnL,GAC1C,MAAsD,MAA/CuL,EAAcL,EAAgBC,EAAKnL,IAAkB,EAAI,EA4E3D,IAAMwL,EAAkB,SAACpK,EA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","file":"static/js/main.98d36d80.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\nimport moment from \"moment\";\n\nconst SudokuContext = createContext([\n  \"0\",\n  () => {},\n\n  [],\n  () => {},\n\n  moment(),\n  () => {},\n\n  false,\n  () => {},\n\n  -1,\n  () => {},\n\n  [],\n  () => {},\n\n  false,\n  () => {},\n\n  null,\n  () => {},\n]);\n\nexport const SudokuProvider = ({ children }) => {\n  const [numberSelected, setNumberSelected] = useState(\"0\");\n  const [gameArray, setGameArray] = useState([]);\n  const [timeGameStarted, setTimeGameStarted] = useState(moment());\n  const [fastMode, setFastMode] = useState(false);\n  const [cellSelected, setCellSelected] = useState(-1);\n  const [initArray, setInitArray] = useState([]);\n  const [won, setWon] = useState(false);\n  const [colorFlash, setColorFlash] = useState(null);\n\n  return (\n    <SudokuContext.Provider\n      value={{\n        numberSelected,\n        setNumberSelected,\n        gameArray,\n        setGameArray,\n        timeGameStarted,\n        setTimeGameStarted,\n        fastMode,\n        setFastMode,\n        cellSelected,\n        setCellSelected,\n        initArray,\n        setInitArray,\n        won,\n        setWon,\n        colorFlash,\n        setColorFlash,\n      }}\n    >\n      {children}\n    </SudokuContext.Provider>\n  );\n};\n\nexport const useSudokuContext = () => useContext(SudokuContext);\n","import React from \"react\";\nimport { useSudokuContext } from \"../../../context/SudokuContext\";\n\n/**\n * React component for the Game Section\n */\nexport const GameSection = (props) => {\n  const rows = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n  let { gameArray, cellSelected, initArray, colorFlash } = useSudokuContext();\n\n  /**\n   * Cell Highlight Method 1: Highlight all cells\n   * related to current cell. By related, I mean all\n   * cells in the same row/column/box as the current cell.\n   */\n  // eslint-disable-next-line\n  function _isCellRelatedToSelectedCell(row, column) {\n    if (cellSelected === row * 9 + column) {\n      return true;\n    }\n    let rowOfSelectedCell = Math.floor(cellSelected / 9);\n    let columnOfSelectedCell = cellSelected % 9;\n    if (rowOfSelectedCell === row || columnOfSelectedCell === column) {\n      return true;\n    }\n    return [\n      [0, 3, 0, 3],\n      [0, 3, 3, 6],\n      [0, 3, 6, 9],\n      [3, 6, 0, 3],\n      [3, 6, 3, 6],\n      [3, 6, 6, 9],\n      [6, 9, 0, 3],\n      [6, 9, 3, 6],\n      [6, 9, 6, 9],\n    ].some((array) => {\n      if (\n        rowOfSelectedCell > array[0] - 1 &&\n        row > array[0] - 1 &&\n        rowOfSelectedCell < array[1] &&\n        row < array[1] &&\n        columnOfSelectedCell > array[2] - 1 &&\n        column > array[2] - 1 &&\n        columnOfSelectedCell < array[3] &&\n        column < array[3]\n      )\n        return true;\n      return false;\n    });\n  }\n\n  /**\n   * Cell Highlight Method 2: Highlight all cells with\n   * the same number as in the current cell.\n   */\n  function _isCellSameAsSelectedCell(row, column) {\n    if (cellSelected === row * 9 + column) {\n      return true;\n    }\n    if (gameArray[cellSelected] === \"0\") {\n      return false;\n    }\n  }\n\n  /**\n   * Returns the classes for a cell related to the selected cell.\n   */\n  function _selectedCell(indexOfArray, value, highlight, colorFlash) {\n    if (value !== \"0\") {\n      // sets style of a cell if the cell was empty in initial puzzle\n      if (initArray[indexOfArray] === \"0\") {\n        if (colorFlash) {\n          return (\n            <td\n              className={`game__cell game__cell--userfilled game__cell--${colorFlash}selected`}\n              key={indexOfArray}\n              // onClick={() => props.onClick(indexOfArray)}\n            >\n              {value}\n            </td>\n          );\n        }\n        return (\n          <td\n            className={`game__cell game__cell--userfilled game__cell--${highlight}selected`}\n            key={indexOfArray}\n            // onClick={() => props.onClick(indexOfArray)}\n          >\n            {value}\n          </td>\n        );\n      } else {\n        // set style of cell of pre-filled puzzle cell\n        return (\n          <td\n            className={`game__cell game__cell--filled game__cell--${highlight}selected`}\n            key={indexOfArray}\n            onClick={() => props.onClick(indexOfArray)}\n          >\n            {value}\n          </td>\n        );\n      }\n    } else {\n      // highlight cell on click\n      return (\n        <td\n          className={`game__cell game__cell--${highlight}selected`}\n          key={indexOfArray}\n          onClick={() => props.onClick(indexOfArray)}\n        >\n          {value}\n        </td>\n      );\n    }\n  }\n\n  /**\n   * Returns the classes or a cell not related to the selected cell.\n   */\n  function _unselectedCell(indexOfArray, value) {\n    if (value !== \"0\") {\n      // cannot click correctly filled cells\n      if (initArray[indexOfArray] === \"0\") {\n        return (\n          <td className=\"game__cell game__cell--userfilled\" key={indexOfArray}>\n            {value}\n          </td>\n        );\n      } else {\n        // cannot click pre-filled cells\n        return (\n          <td className=\"game__cell game__cell--filled\" key={indexOfArray}>\n            {value}\n          </td>\n        );\n      }\n    } else {\n      // only allow cell selection once the answer flash goes away\n      const handleClick = (indexOfArray) => {\n        if (!colorFlash) {\n          props.onClick(indexOfArray);\n        }\n      };\n      return (\n        <td\n          className=\"game__cell\"\n          key={indexOfArray}\n          onClick={() => handleClick(indexOfArray)}\n        >\n          {value}\n        </td>\n      );\n    }\n  }\n\n  return (\n    <section className=\"game\">\n      <table className=\"game__board\">\n        <tbody>\n          {rows.map((row) => {\n            return (\n              <tr className=\"game__row\" key={row}>\n                {rows.map((column) => {\n                  const indexOfArray = row * 9 + column;\n                  const value = gameArray[indexOfArray];\n\n                  if (cellSelected === indexOfArray) {\n                    return _selectedCell(\n                      indexOfArray,\n                      value,\n                      \"highlight\",\n                      colorFlash\n                    );\n                  }\n\n                  if (\n                    cellSelected !== -1 &&\n                    _isCellSameAsSelectedCell(row, column)\n                  ) {\n                    return _selectedCell(indexOfArray, value, \"\");\n                  } else {\n                    return _unselectedCell(indexOfArray, value);\n                  }\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </section>\n  );\n};\n","import React, { createContext, useContext, useState } from \"react\";\nimport moment from \"moment\";\n\nexport const DIFFICULTY = {\n  e: \"EASY\",\n  m: \"MEDIUM\",\n  h: \"HARD\",\n};\n\nconst SettingsContext = createContext([\n  DIFFICULTY.e,\n  () => {},\n\n  moment(),\n  () => {},\n\n  [],\n  () => {},\n\n  {},\n  () => {},\n\n  () => {},\n\n  moment(),\n  () => {},\n\n  30,\n  () => {},\n]);\n\nexport const SettingsProvider = ({ children }) => {\n  const [difficulty, setDifficulty] = useState(DIFFICULTY.e);\n  const [timeTurnStarted, setTimeTurnStarted] = useState(moment());\n  const [players, setPlayers] = useState([\n    {\n      id: 0,\n      name: \"Player 1\",\n    },\n    {\n      id: 1,\n      name: \"Player 2\",\n    },\n    {\n      id: 3,\n      name: \"Player 3\",\n    },\n  ]);\n  const [currentPlayer, setCurrentPlayer] = useState(players[0]);\n\n  function nextPlayer() {\n    if (currentPlayer.id < players.length - 1) {\n      setCurrentPlayer(players[currentPlayer.id + 1]);\n    } else {\n      setCurrentPlayer(players[0]);\n    }\n  }\n\n  const [currentTime, setCurrentTime] = useState(moment());\n  const [timeSetting, setTimeSetting] = useState(30);\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        difficulty,\n        setDifficulty,\n        timeTurnStarted,\n        setTimeTurnStarted,\n        players,\n        setPlayers,\n        currentPlayer,\n        setCurrentPlayer,\n        nextPlayer,\n        currentTime,\n        setCurrentTime,\n        timeSetting,\n        setTimeSetting,\n      }}\n    >\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport const useSettingsContext = () => useContext(SettingsContext);\n","import React, { useEffect } from \"react\";\nimport { useSudokuContext } from \"../../context/SudokuContext\";\nimport { useSettingsContext } from \"../../context/SettingsContext\";\nimport moment from \"moment\";\n\n/**\n * React component for the Timer in Status Section.\n * Uses the 'useEffect' hook to update the timer every second.\n */\nexport const Timer = (props) => {\n  const { won } = useSudokuContext();\n  const {\n    timeTurnStarted,\n    setTimeTurnStarted,\n    currentPlayer,\n    nextPlayer,\n    currentTime,\n    setCurrentTime,\n    timeSetting,\n  } = useSettingsContext();\n\n  useEffect(() => {\n    function tick() {\n      setCurrentTime(moment());\n    }\n    if (!won) setTimeout(() => tick(), 1000);\n  }, [currentTime, setCurrentTime, won]);\n\n  const secondsTotal = currentTime.diff(timeTurnStarted, \"seconds\");\n  const timeRemaining = timeSetting - secondsTotal;\n\n  useEffect(() => {\n    const resetTimer = () => {\n      setTimeTurnStarted(moment());\n    };\n\n    const nextTurnNewPlayer = () => {\n      nextPlayer();\n      resetTimer();\n    };\n\n    if (timeRemaining < 0) {\n      nextTurnNewPlayer();\n    }\n  }, [setTimeTurnStarted, nextPlayer, timeRemaining]);\n\n  let style;\n  if (currentPlayer.id === 0) {\n    style = { backgroundColor: \"#afc7de\" };\n  } else if (currentPlayer.id === 1) {\n    style = { backgroundColor: \"#d9a0c7\" };\n  } else {\n    style = { backgroundColor: \"#a4e0b4\" };\n  }\n  return (\n    <>\n      <div style={style}>Current Player: {currentPlayer.name}</div>\n      <div className=\"status__time\" onClick={() => {}}>\n        {timeRemaining}\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { useSudokuContext } from \"../../context/SudokuContext\";\n\n/**\n * React component for the Number Selector in the Status Section.\n */\nexport const Numbers = (props) => {\n  let { numberSelected } = useSudokuContext();\n\n  return (\n    <div className=\"status__numbers\">\n      {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((number) => {\n        if (numberSelected === number.toString()) {\n          return (\n            <div\n              className=\"status__number status__number--selected\"\n              key={number}\n              onClick={() => props.onClickNumber(number.toString())}\n            >\n              {number}\n            </div>\n          );\n        } else {\n          return (\n            <div\n              className=\"status__number\"\n              key={number}\n              onClick={() => props.onClickNumber(number.toString())}\n            >\n              {number}\n            </div>\n          );\n        }\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Timer } from \"../Timer\";\nimport { Numbers } from \"../Numbers\";\n\n/**\n * React component for the Status Section.\n */\nexport const StatusSection = (props) => {\n  return (\n    <section className=\"status\">\n      <h2 onClick={props.onClickNewGame}>New Game</h2>\n      <Timer />\n      <Numbers onClickNumber={(number) => props.onClickNumber(number)} />\n      {/* <div className=\"status__actions\">\n        <Action action=\"undo\" onClickAction={props.onClickUndo} />\n        <Action action=\"erase\" onClickAction={props.onClickErase} />\n        <Action action=\"hint\" onClickAction={props.onClickHint} />\n        <Mode mode=\"mistakes\" onClickMode={props.onClickMistakesMode} />\n        <Mode mode=\"fast\" onClickMode={props.onClickFastMode} />\n      </div> */}\n    </section>\n  );\n};\n","/*\n    Sudoku.js\n    ---------\n\n    A Sudoku puzzle generator and solver JavaScript library.\n\n    Please see the README for more details.\n*/\n\n//(function(root){\n    //var sudoku = root.sudoku = {};  // Global reference to the sudoku library\n    var sudoku = {};\n    sudoku.DIGITS = \"123456789\";    // Allowed sudoku.DIGITS\n    var ROWS = \"ABCDEFGHI\";         // Row lables\n    var COLS = sudoku.DIGITS;       // Column lables\n    var SQUARES = null;             // Square IDs\n\n    var UNITS = null;               // All units (row, column, or box)\n    var SQUARE_UNITS_MAP = null;    // Squares -> units map\n    var SQUARE_PEERS_MAP = null;    // Squares -> peers map\n\n    var MIN_GIVENS = 17;            // Minimum number of givens\n    var NR_SQUARES = 81;            // Number of squares\n\n    // Define difficulties by how many squares are given to the player in a new\n    // puzzle.\n    var DIFFICULTY = {\n        \"easy\":         62,\n        \"medium\":       53,\n        \"hard\":         44,\n        \"very-hard\":    35,\n        \"insane\":       26,\n        \"inhuman\":      17,\n    };\n\n    // Blank character and board representation\n    sudoku.BLANK_CHAR = '.';\n    sudoku.BLANK_BOARD = \"....................................................\"+\n            \".............................\";\n\n    // Init\n    // -------------------------------------------------------------------------\n    function initialize(){\n        /* Initialize the Sudoku library (invoked after library load)\n        */\n        SQUARES             = sudoku._cross(ROWS, COLS);\n        UNITS               = sudoku._get_all_units(ROWS, COLS);\n        SQUARE_UNITS_MAP    = sudoku._get_square_units_map(SQUARES, UNITS);\n        SQUARE_PEERS_MAP    = sudoku._get_square_peers_map(SQUARES,\n                                    SQUARE_UNITS_MAP);\n    }\n\n    // Generate\n    // -------------------------------------------------------------------------\n    sudoku.generate = function(difficulty, unique){\n        /* Generate a new Sudoku puzzle of a particular `difficulty`, e.g.,\n\n            // Generate an \"easy\" sudoku puzzle\n            sudoku.generate(\"easy\");\n\n\n        Difficulties are as follows, and represent the number of given squares:\n\n                \"easy\":         61\n                \"medium\":       52\n                \"hard\":         43\n                \"very-hard\":    34\n                \"insane\":       25\n                \"inhuman\":      17\n\n\n        You may also enter a custom number of squares to be given, e.g.,\n\n            // Generate a new Sudoku puzzle with 60 given squares\n            sudoku.generate(60)\n\n\n        `difficulty` must be a number between 17 and 81 inclusive. If it's\n        outside of that range, `difficulty` will be set to the closest bound,\n        e.g., 0 -> 17, and 100 -> 81.\n\n\n        By default, the puzzles are unique, uless you set `unique` to false.\n        (Note: Puzzle uniqueness is not yet implemented, so puzzles are *not*\n        guaranteed to have unique solutions)\n\n        TODO: Implement puzzle uniqueness\n        */\n\n        // If `difficulty` is a string or undefined, convert it to a number or\n        // default it to \"easy\" if undefined.\n        if(typeof difficulty === \"string\" || typeof difficulty === \"undefined\"){\n            difficulty = DIFFICULTY[difficulty] || DIFFICULTY.easy;\n        }\n\n        // Force difficulty between 17 and 81 inclusive\n        difficulty = sudoku._force_range(difficulty, NR_SQUARES + 1,\n                MIN_GIVENS);\n\n        // Default unique to true\n        unique = unique || true;\n\n        // Get a set of squares and all possible candidates for each square\n        var blank_board = \"\";\n        for(var i = 0; i < NR_SQUARES; ++i){\n            blank_board += '.';\n        }\n        var candidates = sudoku._get_candidates_map(blank_board);\n\n        // For each item in a shuffled list of squares\n        var shuffled_squares = sudoku._shuffle(SQUARES);\n        for(var si in shuffled_squares){\n            var square = shuffled_squares[si];\n\n            // If an assignment of a random chioce causes a contradictoin, give\n            // up and try again\n            var rand_candidate_idx =\n                    sudoku._rand_range(candidates[square].length);\n            var rand_candidate = candidates[square][rand_candidate_idx];\n            if(!sudoku._assign(candidates, square, rand_candidate)){\n                break;\n            }\n\n            // Make a list of all single candidates\n            var single_candidates = [];\n            for(si in SQUARES){\n                square = SQUARES[si];\n\n                if(candidates[square].length === 1){\n                    single_candidates.push(candidates[square]);\n                }\n            }\n\n            // If we have at least difficulty, and the unique candidate count is\n            // at least 8, return the puzzle!\n            if(single_candidates.length >= difficulty &&\n                    sudoku._strip_dups(single_candidates).length >= 8){\n                var board = \"\";\n                var givens_idxs = [];\n                for(i in SQUARES){\n                    square = SQUARES[i];\n                    if(candidates[square].length === 1){\n                        board += candidates[square];\n                        givens_idxs.push(i);\n                    } else {\n                        board += sudoku.BLANK_CHAR;\n                    }\n                }\n\n                // If we have more than `difficulty` givens, remove some random\n                // givens until we're down to exactly `difficulty`\n                var nr_givens = givens_idxs.length;\n                if(nr_givens > difficulty){\n                    givens_idxs = sudoku._shuffle(givens_idxs);\n                    for(i = 0; i < nr_givens - difficulty; ++i){\n                        var target = parseInt(givens_idxs[i]);\n                        board = board.substr(0, target) + sudoku.BLANK_CHAR +\n                            board.substr(target + 1);\n                    }\n                }\n\n                // Double check board is solvable\n                // TODO: Make a standalone board checker. Solve is expensive.\n                if(sudoku.solve(board)){\n                    return board;\n                }\n            }\n        }\n\n        // Give up and try a new puzzle\n        return sudoku.generate(difficulty);\n    };\n\n    // Solve\n    // -------------------------------------------------------------------------\n    sudoku.solve = function(board, reverse){\n        /* Solve a sudoku puzzle given a sudoku `board`, i.e., an 81-character\n        string of sudoku.DIGITS, 1-9, and spaces identified by '.', representing the\n        squares. There must be a minimum of 17 givens. If the given board has no\n        solutions, return false.\n\n        Optionally set `reverse` to solve \"backwards\", i.e., rotate through the\n        possibilities in reverse. Useful for checking if there is more than one\n        solution.\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        // Check number of givens is at least MIN_GIVENS\n        var nr_givens = 0;\n        for(var i in board){\n            if(board[i] !== sudoku.BLANK_CHAR && sudoku._in(board[i], sudoku.DIGITS)){\n                ++nr_givens;\n            }\n        }\n        if(nr_givens < MIN_GIVENS){\n            // eslint-disable-next-line\n            throw \"Too few givens. Minimum givens is \" + MIN_GIVENS;\n        }\n\n        // Default reverse to false\n        reverse = reverse || false;\n\n        var candidates = sudoku._get_candidates_map(board);\n        var result = sudoku._search(candidates, reverse);\n\n        if(result){\n            var solution = \"\";\n            for(var square in result){\n                solution += result[square];\n            }\n            return solution;\n        }\n        return false;\n    };\n\n    sudoku.get_candidates = function(board){\n        /* Return all possible candidatees for each square as a grid of\n        candidates, returnning `false` if a contradiction is encountered.\n\n        Really just a wrapper for sudoku._get_candidates_map for programmer\n        consumption.\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        // Get a candidates map\n        var candidates_map = sudoku._get_candidates_map(board);\n\n        // If there's an error, return false\n        if(!candidates_map){\n            return false;\n        }\n\n        // Transform candidates map into grid\n        var rows = [];\n        var cur_row = [];\n        var i = 0;\n        for(var square in candidates_map){\n            var candidates = candidates_map[square];\n            cur_row.push(candidates);\n            if(i % 9 === 8){\n                rows.push(cur_row);\n                cur_row = [];\n            }\n            ++i;\n        }\n        return rows;\n    }\n\n    sudoku._get_candidates_map = function(board){\n        /* Get all possible candidates for each square as a map in the form\n        {square: sudoku.DIGITS} using recursive constraint propagation. Return `false`\n        if a contradiction is encountered\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        var candidate_map = {};\n        var squares_values_map = sudoku._get_square_vals_map(board);\n\n        // Start by assigning every digit as a candidate to every square\n        for(var si in SQUARES){\n            candidate_map[SQUARES[si]] = sudoku.DIGITS;\n        }\n\n        // For each non-blank square, assign its value in the candidate map and\n        // propigate.\n        for(var square in squares_values_map){\n            var val = squares_values_map[square];\n\n            if(sudoku._in(val, sudoku.DIGITS)){\n                var new_candidates = sudoku._assign(candidate_map, square, val);\n\n                // Fail if we can't assign val to square\n                if(!new_candidates){\n                    return false;\n                }\n            }\n        }\n\n        return candidate_map;\n    };\n\n    sudoku._search = function(candidates, reverse){\n        /* Given a map of squares -> candiates, using depth-first search,\n        recursively try all possible values until a solution is found, or false\n        if no solution exists.\n        */\n\n        // Return if error in previous iteration\n        if(!candidates){\n            return false;\n        }\n\n        // Default reverse to false\n        reverse = reverse || false;\n\n        // If only one candidate for every square, we've a solved puzzle!\n        // Return the candidates map.\n        var max_nr_candidates = 0;\n        // eslint-disable-next-line\n        var max_candidates_square = null;\n        for(var si in SQUARES){\n            var square = SQUARES[si];\n\n            var nr_candidates = candidates[square].length;\n\n            if(nr_candidates > max_nr_candidates){\n                max_nr_candidates = nr_candidates;\n                // eslint-disable-next-line no-unused-vars\n                max_candidates_square = square;\n            }\n        }\n        if(max_nr_candidates === 1){\n            return candidates;\n        }\n\n        // Choose the blank square with the fewest possibilities > 1\n        var min_nr_candidates = 10;\n        var min_candidates_square = null;\n        for(si in SQUARES){\n            square = SQUARES[si];\n\n            nr_candidates = candidates[square].length;\n\n            if(nr_candidates < min_nr_candidates && nr_candidates > 1){\n                min_nr_candidates = nr_candidates;\n                min_candidates_square = square;\n            }\n        }\n\n        // Recursively search through each of the candidates of the square\n        // starting with the one with fewest candidates.\n\n        // Rotate through the candidates forwards\n        var min_candidates = candidates[min_candidates_square];\n        if(!reverse){\n            for(var vi in min_candidates){\n                var val = min_candidates[vi];\n\n                // TODO: Implement a non-rediculous deep copy function\n                var candidates_copy = JSON.parse(JSON.stringify(candidates));\n                var candidates_next = sudoku._search(\n                    sudoku._assign(candidates_copy, min_candidates_square, val)\n                );\n\n                if(candidates_next){\n                    return candidates_next;\n                }\n            }\n\n        // Rotate through the candidates backwards\n        } else {\n            for(vi = min_candidates.length - 1; vi >= 0; --vi){\n                val = min_candidates[vi];\n\n                // TODO: Implement a non-rediculous deep copy function\n                candidates_copy = JSON.parse(JSON.stringify(candidates));\n                candidates_next = sudoku._search(\n                    sudoku._assign(candidates_copy, min_candidates_square, val),\n                    reverse\n                );\n\n                if(candidates_next){\n                    return candidates_next;\n                }\n            }\n        }\n\n        // If we get through all combinations of the square with the fewest\n        // candidates without finding an answer, there isn't one. Return false.\n        return false;\n    };\n\n    sudoku._assign = function(candidates, square, val){\n        /* Eliminate all values, *except* for `val`, from `candidates` at\n        `square` (candidates[square]), and propagate. Return the candidates map\n        when finished. If a contradiciton is found, return false.\n\n        WARNING: This will modify the contents of `candidates` directly.\n        */\n\n        // Grab a list of canidates without 'val'\n        var other_vals = candidates[square].replace(val, \"\");\n\n        // Loop through all other values and eliminate them from the candidates\n        // at the current square, and propigate. If at any point we get a\n        // contradiction, return false.\n        for(var ovi in other_vals){\n            var other_val = other_vals[ovi];\n\n            var candidates_next =\n                sudoku._eliminate(candidates, square, other_val);\n\n            if(!candidates_next){\n                //console.log(\"Contradiction found by _eliminate.\");\n                return false;\n            }\n        }\n\n        return candidates;\n    };\n\n    sudoku._eliminate = function(candidates, square, val){\n        /* Eliminate `val` from `candidates` at `square`, (candidates[square]),\n        and propagate when values or places <= 2. Return updated candidates,\n        unless a contradiction is detected, in which case, return false.\n\n        WARNING: This will modify the contents of `candidates` directly.\n        */\n\n        // If `val` has already been eliminated from candidates[square], return\n        // with candidates.\n        if(!sudoku._in(val, candidates[square])){\n            return candidates;\n        }\n\n        // Remove `val` from candidates[square]\n        candidates[square] = candidates[square].replace(val, '');\n\n        // If the square has only candidate left, eliminate that value from its\n        // peers\n        var nr_candidates = candidates[square].length;\n        if(nr_candidates === 1){\n            var target_val = candidates[square];\n\n            for(var pi in SQUARE_PEERS_MAP[square]){\n                var peer = SQUARE_PEERS_MAP[square][pi];\n\n                var candidates_new =\n                        sudoku._eliminate(candidates, peer, target_val);\n\n                if(!candidates_new){\n                    return false;\n                }\n            }\n\n        // Otherwise, if the square has no candidates, we have a contradiction.\n        // Return false.\n        } if(nr_candidates === 0){\n            return false;\n        }\n\n        // If a unit is reduced to only one place for a value, then assign it\n        for(var ui in SQUARE_UNITS_MAP[square]){\n            var unit = SQUARE_UNITS_MAP[square][ui];\n\n            var val_places = [];\n            for(var si in unit){\n                var unit_square = unit[si];\n                if(sudoku._in(val, candidates[unit_square])){\n                    val_places.push(unit_square);\n                }\n            }\n\n            // If there's no place for this value, we have a contradition!\n            // return false\n            if(val_places.length === 0){\n                return false;\n\n            // Otherwise the value can only be in one place. Assign it there.\n            } else if(val_places.length === 1){\n                candidates_new =\n                    sudoku._assign(candidates, val_places[0], val);\n\n                if(!candidates_new){\n                    return false;\n                }\n            }\n        }\n\n        return candidates;\n    };\n\n\n    // Square relationships\n    // -------------------------------------------------------------------------\n    // Squares, and their relationships with values, units, and peers.\n\n    sudoku._get_square_vals_map = function(board){\n        /* Return a map of squares -> values\n        */\n        var squares_vals_map = {};\n\n        // Make sure `board` is a string of length 81\n        if(board.length !== SQUARES.length){\n            // eslint-disable-next-line\n            throw \"Board/squares length mismatch.\";\n\n        } else {\n            for(var i in SQUARES){\n                squares_vals_map[SQUARES[i]] = board[i];\n            }\n        }\n\n        return squares_vals_map;\n    };\n\n    sudoku._get_square_units_map = function(squares, units){\n        /* Return a map of `squares` and their associated units (row, col, box)\n        */\n        var square_unit_map = {};\n\n        // For every square...\n        for(var si in squares){\n            var cur_square = squares[si];\n\n            // Maintain a list of the current square's units\n            var cur_square_units = [];\n\n            // Look through the units, and see if the current square is in it,\n            // and if so, add it to the list of of the square's units.\n            for(var ui in units){\n                var cur_unit = units[ui];\n\n                if(cur_unit.indexOf(cur_square) !== -1){\n                    cur_square_units.push(cur_unit);\n                }\n            }\n\n            // Save the current square and its units to the map\n            square_unit_map[cur_square] = cur_square_units;\n        }\n\n        return square_unit_map;\n    };\n\n    sudoku._get_square_peers_map = function(squares, units_map){\n        /* Return a map of `squares` and their associated peers, i.e., a set of\n        other squares in the square's unit.\n        */\n        var square_peers_map = {};\n\n        // For every square...\n        for(var si in squares){\n            var cur_square = squares[si];\n            var cur_square_units = units_map[cur_square];\n\n            // Maintain list of the current square's peers\n            var cur_square_peers = [];\n\n            // Look through the current square's units map...\n            for(var sui in cur_square_units){\n                var cur_unit = cur_square_units[sui];\n\n                for(var ui in cur_unit){\n                    var cur_unit_square = cur_unit[ui];\n\n                    if(cur_square_peers.indexOf(cur_unit_square) === -1 &&\n                            cur_unit_square !== cur_square){\n                        cur_square_peers.push(cur_unit_square);\n                    }\n                }\n            }\n\n            // Save the current square an its associated peers to the map\n            square_peers_map[cur_square] = cur_square_peers;\n        }\n\n        return square_peers_map;\n    };\n\n    sudoku._get_all_units = function(rows, cols){\n        /* Return a list of all units (rows, cols, boxes)\n        */\n        var units = [];\n\n        // Rows\n        for(var ri in rows){\n            units.push(sudoku._cross(rows[ri], cols));\n        }\n\n        // Columns\n        for(var ci in cols){\n           units.push(sudoku._cross(rows, cols[ci]));\n        }\n\n        // Boxes\n        var row_squares = [\"ABC\", \"DEF\", \"GHI\"];\n        var col_squares = [\"123\", \"456\", \"789\"];\n        for(var rsi in row_squares){\n            for(var csi in col_squares){\n                units.push(sudoku._cross(row_squares[rsi], col_squares[csi]));\n            }\n        }\n\n        return units;\n    };\n\n\n    // Conversions\n    // -------------------------------------------------------------------------\n    sudoku.board_string_to_grid = function(board_string){\n        /* Convert a board string to a two-dimensional array\n        */\n        var rows = [];\n        var cur_row = [];\n        for(var i in board_string){\n            cur_row.push(board_string[i]);\n            if(i % 9 === 8){\n                rows.push(cur_row);\n                cur_row = [];\n            }\n        }\n        return rows;\n    };\n\n    sudoku.board_grid_to_string = function(board_grid){\n        /* Convert a board grid to a string\n        */\n        var board_string = \"\";\n        for(var r = 0; r < 9; ++r){\n            for(var c = 0; c < 9; ++c){\n                board_string += board_grid[r][c];\n            }\n        }\n        return board_string;\n    };\n\n\n    // Utility\n    // -------------------------------------------------------------------------\n\n    sudoku.print_board = function(board){\n        /* Print a sudoku `board` to the console.\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        var V_PADDING = \" \";  // Insert after each square\n        var H_PADDING = '\\n'; // Insert after each row\n\n        var V_BOX_PADDING = \"  \"; // Box vertical padding\n        var H_BOX_PADDING = '\\n'; // Box horizontal padding\n\n        var display_string = \"\";\n\n        for(var i in board){\n            var square = board[i];\n\n            // Add the square and some padding\n            display_string += square + V_PADDING;\n\n            // Vertical edge of a box, insert v. box padding\n            if(i % 3 === 2){\n                display_string += V_BOX_PADDING;\n            }\n\n            // End of a line, insert horiz. padding\n            if(i % 9 === 8){\n                display_string += H_PADDING;\n            }\n\n            // Horizontal edge of a box, insert h. box padding\n            if(i % 27 === 26){\n                display_string += H_BOX_PADDING;\n            }\n        }\n\n        console.log(display_string);\n    };\n\n    sudoku.validate_board = function(board){\n        /* Return if the given `board` is valid or not. If it's valid, return\n        true. If it's not, return a string of the reason why it's not.\n        */\n\n        // Check for empty board\n        if(!board){\n            return \"Empty board\";\n        }\n\n        // Invalid board length\n        if(board.length !== NR_SQUARES){\n            return \"Invalid board size. Board must be exactly \" + NR_SQUARES +\n                    \" squares.\";\n        }\n\n        // Check for invalid characters\n        for(var i in board){\n            if(!sudoku._in(board[i], sudoku.DIGITS) && board[i] !== sudoku.BLANK_CHAR){\n                return \"Invalid board character encountered at index \" + i +\n                        \": \" + board[i];\n            }\n        }\n\n        // Otherwise, we're good. Return true.\n        return true;\n    };\n\n    sudoku._cross = function(a, b){\n        /* Cross product of all elements in `a` and `b`, e.g.,\n        sudoku._cross(\"abc\", \"123\") ->\n        [\"a1\", \"a2\", \"a3\", \"b1\", \"b2\", \"b3\", \"c1\", \"c2\", \"c3\"]\n        */\n        var result = [];\n        for(var ai in a){\n            for(var bi in b){\n                result.push(a[ai] + b[bi]);\n            }\n        }\n        return result;\n    };\n\n    sudoku._in = function(v, seq){\n        /* Return if a value `v` is in sequence `seq`.\n        */\n        return seq.indexOf(v) !== -1;\n    };\n\n    sudoku._first_true = function(seq){\n        /* Return the first element in `seq` that is true. If no element is\n        true, return false.\n        */\n        for(var i in seq){\n            if(seq[i]){\n                return seq[i];\n            }\n        }\n        return false;\n    };\n\n    sudoku._shuffle = function(seq){\n        /* Return a shuffled version of `seq`\n        */\n\n        // Create an array of the same size as `seq` filled with false\n        var shuffled = [];\n        for(var i = 0; i < seq.length; ++i){\n            shuffled.push(false);\n        }\n\n        for(i in seq){\n            var ti = sudoku._rand_range(seq.length);\n\n            while(shuffled[ti]){\n                ti = (ti + 1) > (seq.length - 1) ? 0 : (ti + 1);\n            }\n\n            shuffled[ti] = seq[i];\n        }\n\n        return shuffled;\n    };\n\n    sudoku._rand_range = function(max, min){\n        /* Get a random integer in the range of `min` to `max` (non inclusive).\n        If `min` not defined, default to 0. If `max` not defined, throw an\n        error.\n        */\n        min = min || 0;\n        if(max){\n            return Math.floor(Math.random() * (max - min)) + min;\n        } else {\n            // eslint-disable-next-line\n            throw \"Range undefined\";\n        }\n    };\n\n    sudoku._strip_dups = function(seq){\n        /* Strip duplicate values from `seq`\n        */\n        var seq_set = [];\n        var dup_map = {};\n        for(var i in seq){\n            var e = seq[i];\n            if(!dup_map[e]){\n                seq_set.push(e);\n                dup_map[e] = true;\n            }\n        }\n        return seq_set;\n    };\n\n    sudoku._force_range = function(nr, max, min){\n        /* Force `nr` to be within the range from `min` to, but not including,\n        `max`. `min` is optional, and will default to 0. If `nr` is undefined,\n        treat it as zero.\n        */\n        min = min || 0\n        nr = nr || 0\n        if(nr < min){\n            return min;\n        }\n        if(nr > max){\n            return max;\n        }\n        return nr\n    }\n\n    // Initialize library after load\n    initialize();\n\n    export const getSudoku = () => {\n      return sudoku;\n    }\n\n// Pass whatever the root object is, like 'window' in browsers\n//})(this);\n","/**\n *  This file gets the solved sudoku from 'sudoku.js' and\n * generates a unique sudoku position from it.\n *\n *  Initially, I tried the sudokus generated by 'sudoku.js'. But\n * it didnt handle the difficulty properly. An 'Easy' sudoku is\n * not that easy, and can be quite hard sometimes! And, filling\n * is uneven. Sometimes, entire rows/columns/boxes are filled!\n *\n *  The 'sudoku.js' code is untouched, except for the minimal\n * changes required to import it here.\n *\n *  The 'sudoku.js' javascript library by robatron is at\n * https://github.com/robatron/sudoku.js . All credits to\n * robatron for taking the hustle out of creating valid sudokus!\n *\n *  My code in this module builds on his code! This wouldn't\n * be possible without people like him sharing in the\n * open source community!\n */\nimport { getSudoku } from \"./sudoku\";\n\n/**\n * The Sudoku position is 9x9.\n *    A1 A2 A3 A4 A5 A6 A7 A8 A9\n *    B1 B2 B3 B4 B5 B6 B7 B8 B9\n *    C1 C2 C3 C4 C5 C6 C7 C8 C9\n *    D1 D2 D3 D4 D5 D6 D7 D8 D9\n *    E1 E2 E3 E4 E5 E6 E7 E8 E9\n *    F1 F2 F3 F4 F5 F6 F7 F8 F9\n *    G1 G2 G3 G4 G5 G6 G7 G8 G9\n *    H1 H2 H3 H4 H5 H6 H7 H8 H9\n *    I1 I2 I3 I4 I5 I6 I7 I8 I9\n *\n * It can be considered to be comprised of 9 boxes\n * each, stacked in a 3x3 formation.\n * Like this: Box1 Box2 Box3\n *            Box4 Box5 Box6\n *            Box7 Box8 Box9\n *\n * In turn, each box is comprised of 9 cells stacked\n * in a 3x3 formation as above. This gives us the below\n * representation:\n *      Box1        Box2        Box3\n *    A1 A2 A3    A4 A5 A6    A7 A8 A9\n *    B1 B2 B3    B4 B5 B6    B7 B8 B9\n *    C1 C2 C3    C4 C5 C6    C7 C8 C9\n *      Box4        Box5        Box6\n *    D1 D2 D3    D4 D5 D6    D7 D8 D9\n *    E1 E2 E3    E4 E5 E6    E7 E8 E9\n *    F1 F2 F3    F4 F5 F6    F7 F8 F9\n *      Box7        Box8        Box9\n *    G1 G2 G3    G4 G5 G6    G7 G8 G9\n *    H1 H2 H3    H4 H5 H6    H7 H8 H9\n *    I1 I2 I3    I4 I5 I6    I7 I8 I9\n *\n * For example, Box1 has the following cells:\n * Box1: A1 A2 A3\n *       B1 B2 B3\n *       C1 C2 C3\n *\n * So in Box1,\n *    Cell1: A1   Cell2: A2   Cell3: A3\n *    Cell4: B1   Cell5: B2   Cell6: B3\n *    Cell7: C1   Cell8: C2   Cell9: C3\n *\n * and in Box8,\n *    Cell1: G4   Cell2: G5   Cell3: G6\n *    Cell4: H4   Cell5: H5   Cell6: H6\n *    Cell7: I4   Cell8: I5   Cell9: I6\n *\n * and so on...\n */\n\n/**\n * Initializes a null array for easier resets in the code.\n */\nlet nullArray = [\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n];\n\n/**\n * Gets the coordinates of the center cell of the specified box.\n */\nfunction _getBoxCenter(box) {\n  // eslint-disable-next-line\n  switch (box) {\n    case 0:\n      return [1, 1];\n    case 1:\n      return [1, 4];\n    case 2:\n      return [1, 7];\n    case 3:\n      return [4, 1];\n    case 4:\n      return [4, 4];\n    case 5:\n      return [4, 7];\n    case 6:\n      return [7, 1];\n    case 7:\n      return [7, 4];\n    case 8:\n      return [7, 7];\n  }\n}\n\n/**\n * Gets the index of cell given:\n * 1. Box\n * 2. Cell\n */\nfunction _getIndexOfCell(box, cell) {\n  let [row, column] = _getBoxCenter(box);\n  // eslint-disable-next-line\n  switch (cell) {\n    case 0: {\n      row--;\n      column--;\n      break;\n    }\n    case 1: {\n      row--;\n      break;\n    }\n    case 2: {\n      row--;\n      column++;\n      break;\n    }\n    case 3: {\n      column--;\n      break;\n    }\n    case 4: {\n      break;\n    }\n    case 5: {\n      column++;\n      break;\n    }\n    case 6: {\n      row++;\n      column--;\n      break;\n    }\n    case 7: {\n      row++;\n      break;\n    }\n    case 8: {\n      row++;\n      column++;\n      break;\n    }\n  }\n  return row * 9 + column;\n}\n\n/**\n * Checks if Cell is available or not (i.e., filled).\n */\nfunction _cellAvailable(tempInitArray, box, value) {\n  return tempInitArray[_getIndexOfCell(box, value)] === \"0\" ? 0 : 1;\n}\n\n/**\n * Generates a Unique Sudoku puzzle from a solved Sudoku.\n */\nfunction _generateUniqueSudoku(solvedArray, difficulty, newDifficulty) {\n  let currentDifficulty = difficulty;\n  let minimumCells, maximumCells, totalCells, box, cell;\n\n  let tempInitArray = nullArray.slice();\n  let boxCounts = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  let boxesAvailable = [];\n  let cellsAvailable = [];\n\n  if (newDifficulty) currentDifficulty = newDifficulty;\n\n  if (currentDifficulty === \"EASY\") {\n    minimumCells = 3;\n    maximumCells = 7;\n    totalCells = 45;\n  } else if (currentDifficulty === \"MEDIUM\") {\n    minimumCells = 2;\n    maximumCells = 6;\n    totalCells = 40;\n  } else {\n    minimumCells = 1;\n    maximumCells = 5;\n    totalCells = 30;\n  }\n\n  for (let j = 0; j < 9; j++) {\n    boxCounts[j] =\n      _cellAvailable(tempInitArray, j, 0) +\n      _cellAvailable(tempInitArray, j, 1) +\n      _cellAvailable(tempInitArray, j, 2) +\n      _cellAvailable(tempInitArray, j, 3) +\n      _cellAvailable(tempInitArray, j, 4) +\n      _cellAvailable(tempInitArray, j, 5) +\n      _cellAvailable(tempInitArray, j, 6) +\n      _cellAvailable(tempInitArray, j, 7) +\n      _cellAvailable(tempInitArray, j, 8);\n  }\n\n  for (let i = 0; i < totalCells; i++) {\n    boxesAvailable = [];\n    for (let j = 0; j < 9; j++) {\n      if (boxCounts[j] < minimumCells) {\n        boxesAvailable.push(j);\n      }\n    }\n    if (boxesAvailable) {\n      for (let j = 0; j < 9; j++) {\n        if (boxCounts[j] < maximumCells) {\n          boxesAvailable.push(j);\n        }\n      }\n    }\n    box = boxesAvailable[(Math.random() * boxesAvailable.length) | 0];\n\n    cellsAvailable = [];\n    for (let j = 0; j < 9; j++) {\n      if (tempInitArray[_getIndexOfCell(box, j)] === \"0\") {\n        cellsAvailable.push(j);\n      }\n    }\n    cell = cellsAvailable[(Math.random() * cellsAvailable.length) | 0];\n\n    let index = _getIndexOfCell(box, cell);\n    tempInitArray[index] = solvedArray[index];\n    boxCounts[box]++;\n  }\n\n  return tempInitArray;\n}\n\nexport const getUniqueSudoku = (difficulty, newDifficulty) => {\n  let temporaryInitArray = nullArray.slice();\n  let temporarySolvedArray = nullArray.slice();\n  let sudoku = getSudoku();\n\n  /**\n   * Get Sudoku from sudoku.js\n   */\n  let str = sudoku.generate(60);\n\n  [...str].forEach((value, index) => {\n    temporaryInitArray[index] = value === \".\" ? \"0\" : value;\n  });\n\n  /**\n   * Get the solution from sudoku.js\n   */\n  str = sudoku.solve(str);\n  [...str].forEach((value, index) => {\n    temporarySolvedArray[index] = value;\n  });\n\n  /**\n   * Pass the generated solution and get a unique Sudoku from it!\n   */\n  temporaryInitArray = _generateUniqueSudoku(\n    temporarySolvedArray,\n    difficulty,\n    newDifficulty\n  );\n\n  return [temporaryInitArray, temporarySolvedArray];\n};\n","import React from \"react\";\nimport {\n  makeStyles,\n  createMuiTheme,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst titleTheme = createMuiTheme({\n  typography: {\n    fontFamily: '\"Viga\", sans-serif',\n  },\n});\n\nconst useStyles = makeStyles((theme) => {\n  console.log(\"theme\", theme);\n  return {\n    title: {\n      flexGrow: 1,\n      fontSize: 40,\n    },\n  };\n});\n\nconst TitleTypography = ({ children }) => {\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={titleTheme}>\n      <Typography className={classes.title} color=\"primary\">\n        {children}\n      </Typography>\n    </ThemeProvider>\n  );\n};\n\nexport default TitleTypography;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    marginRight: 20,\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.palette.primary.main,\n      backgroundColor: \"transparent\",\n    },\n  },\n}));\n\nconst DifficultyButton = ({ title, handleClick, difficulty }) => {\n  const classes = useStyles();\n  const buttonColor = title === difficulty ? \"primary\" : \"secondary\";\n\n  return (\n    <Button\n      color={buttonColor}\n      className={classes.button}\n      onClick={handleClick}\n    >\n      {title}\n    </Button>\n  );\n};\n\nexport default DifficultyButton;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    marginRight: 20,\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.palette.primary.main,\n      backgroundColor: \"transparent\",\n    },\n  },\n}));\n\nconst CoffeeButton = () => {\n  const classes = useStyles();\n\n  return (\n    <Button\n      color=\"secondary\"\n      className={classes.button}\n      onClick={() => alert(\"you just bought me $1M of coffee!\")}\n    >\n      BUY ME COFFEE\n    </Button>\n  );\n};\n\nexport default CoffeeButton;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\n\nimport TitleTypography from \"./TitleTypography\";\nimport DifficultyButton from \"./DifficultyButton\";\nimport CoffeeButton from \"./CoffeeButton\";\n\nimport { DIFFICULTY } from \"../context/SettingsContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  header: {\n    borderBottom: \"1px solid lightgray\",\n    minHeight: \"100px\",\n  },\n  subheader: {\n    borderBottom: \"1px solid lightgray\",\n    minHeight: \"50px\",\n  },\n  subheaderButton: {\n    \"&:hover\": {\n      color: theme.palette.primary.main,\n      backgroundColor: \"transparent\",\n    },\n  },\n  difficultyContainer: {\n    flexGrow: 1,\n  },\n}));\n\nconst Header = ({ difficulty, onChangeDifficulty }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"transparent\" elevation={0}>\n        <Toolbar className={classes.header}>\n          <TitleTypography>SUDOKU VERSUS</TitleTypography>\n          <Button\n            size=\"large\"\n            variant=\"contained\"\n            color=\"primary\"\n            disableElevation\n          >\n            Rules\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <AppBar position=\"static\" color=\"transparent\" elevation={0}>\n        <Toolbar className={classes.subheader}>\n          <div className={classes.difficultyContainer}>\n            <DifficultyButton\n              title={DIFFICULTY.e}\n              difficulty={difficulty}\n              handleClick={() => onChangeDifficulty(DIFFICULTY.e)}\n            />\n            <DifficultyButton\n              title={DIFFICULTY.m}\n              difficulty={difficulty}\n              handleClick={() => onChangeDifficulty(DIFFICULTY.m)}\n            />\n            <DifficultyButton\n              title={DIFFICULTY.h}\n              difficulty={difficulty}\n              handleClick={() => onChangeDifficulty(DIFFICULTY.h)}\n            />\n          </div>\n          <CoffeeButton />\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { GameSection } from \"./components/puzzle/layout/GameSection\";\nimport { StatusSection } from \"./components/puzzle/layout/StatusSection\";\nimport { getUniqueSudoku } from \"./solver/UniqueSudoku\";\nimport { useSudokuContext } from \"./context/SudokuContext\";\nimport Header from \"./components/Header\";\nimport { useSettingsContext } from \"./context/SettingsContext\";\n\n/**\n * Game is the main React component.\n */\nexport const Game = () => {\n  /**\n   * All the variables for holding state:\n   * gameArray: Holds the current state of the game.\n   * initArray: Holds the initial state of the game.\n   * solvedArray: Holds the solved position of the game.\n   * difficulty: Difficulty level - 'Easy', 'Medium' or 'Hard'\n   * numberSelected: The Number selected in the Status section.\n   * timeGameStarted: Time the current game was started.\n   * mistakesMode: Is Mistakes allowed or not?\n   * fastMode: Is Fast Mode enabled?\n   * cellSelected: If a game cell is selected by the user, holds the index.\n   * history: history of the current game, for 'Undo' purposes.\n   * overlay: Is the 'Game Solved' overlay enabled?\n   * won: Is the game 'won'?\n   */\n  let {\n    numberSelected,\n    setNumberSelected,\n    gameArray,\n    setGameArray,\n\n    setTimeGameStarted,\n    fastMode,\n    setFastMode,\n    cellSelected,\n    setCellSelected,\n    initArray,\n    setInitArray,\n    setWon,\n    setColorFlash,\n  } = useSudokuContext();\n  const { difficulty, setDifficulty } = useSettingsContext();\n  let [mistakesMode, setMistakesMode] = useState(true);\n  let [history, setHistory] = useState([]);\n  let [solvedArray, setSolvedArray] = useState([]);\n  let [overlay, setOverlay] = useState(false);\n\n  /**\n   * Creates a new game and initializes the state variables.\n   */\n  function _createNewGame(newDifficulty) {\n    let [temporaryInitArray, temporarySolvedArray] = getUniqueSudoku(\n      difficulty,\n      newDifficulty\n    );\n\n    setInitArray(temporaryInitArray);\n    setGameArray(temporaryInitArray);\n    setSolvedArray(temporarySolvedArray);\n    setNumberSelected(\"0\");\n    setTimeGameStarted(moment());\n    setCellSelected(-1);\n    setHistory([]);\n    setWon(false);\n  }\n\n  /**\n   * Checks if the game is solved.\n   */\n  function _isSolved(index, value) {\n    if (\n      gameArray.every((cell, cellIndex) => {\n        if (cellIndex === index) return value === solvedArray[cellIndex];\n        else return cell === solvedArray[cellIndex];\n      })\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Fills the cell with the given 'value'\n   * Used to Fill / Erase as required.\n   */\n  function _fillCell(index, value) {\n    if (initArray[index] === \"0\") {\n      // Direct copy results in interesting set of problems, investigate more!\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n\n      // Can't use tempArray here, due to Side effect below!!\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n\n      tempArray[index] = value;\n      setGameArray(tempArray);\n\n      if (_isSolved(index, value)) {\n        setOverlay(true);\n        setWon(true);\n      }\n    }\n  }\n\n  // clear flash color, clear selected cell, erase cell value\n  function clearWrongAnswer() {\n    setColorFlash(null);\n    onClickErase();\n    setCellSelected(-1);\n  }\n\n  async function triggerWrongAnswer(index, value) {\n    setColorFlash(\"red\");\n    _fillCell(index, value);\n    await setTimeout(() => clearWrongAnswer(), 2000);\n  }\n\n  // clear flash color and refill cell\n  function finishCorrectAnswer(index, value) {\n    setColorFlash(null);\n    _fillCell(index, value);\n    setCellSelected(-1);\n  }\n\n  async function triggerCorrectAnswer(index, value) {\n    setColorFlash(\"green\");\n    _fillCell(index, value);\n    await setTimeout(() => finishCorrectAnswer(), 1000);\n  }\n\n  /**\n   * A 'user fill' will be passed on to the\n   * _fillCell function above.\n   */\n  function _userFillCell(index, value) {\n    if (mistakesMode) {\n      if (value === solvedArray[index]) {\n        triggerCorrectAnswer(index, value);\n        // _fillCell(index, value);\n      } else {\n        triggerWrongAnswer(index, value);\n      }\n    } else {\n      alert(\"error! cell not filled correctly! check mistakesMode state\");\n    }\n  }\n\n  /**\n   * On Click of 'New Game' link,\n   * create a new game.\n   */\n  function onClickNewGame() {\n    _createNewGame();\n  }\n\n  /**\n   * On Click of a Game cell.\n   */\n  function onClickCell(indexOfArray) {\n    if (fastMode && numberSelected !== \"0\") {\n      _userFillCell(indexOfArray, numberSelected);\n    }\n    setCellSelected(indexOfArray);\n  }\n\n  /**\n   * On Change Difficulty,\n   * 1. Update 'Difficulty' level\n   * 2. Create New Game\n   */\n  function onChangeDifficulty(newDifficulty) {\n    setDifficulty(newDifficulty);\n    _createNewGame(newDifficulty);\n  }\n\n  /**\n   * On Click of Number in Status section,\n   * either fill cell or set the number.\n   */\n  function onClickNumber(number) {\n    if (fastMode) {\n      setNumberSelected(number);\n    } else if (cellSelected !== -1) {\n      _userFillCell(cellSelected, number);\n    }\n  }\n\n  /**\n   * On Click Undo,\n   * try to Undo the latest change.\n   */\n  function onClickUndo() {\n    if (history.length) {\n      let tempHistory = history.slice();\n      let tempArray = tempHistory.pop();\n      setHistory(tempHistory);\n      setGameArray(tempArray);\n    }\n  }\n\n  /**\n   * On Click Erase,\n   * try to delete the cell.\n   */\n  // erase cell if the cell is on the board and the cell was initially empty\n  function onClickErase() {\n    if (cellSelected !== -1 && gameArray[cellSelected] === \"0\") {\n      _fillCell(cellSelected, \"0\");\n    }\n  }\n\n  /**\n   * On Click Hint,\n   * fill the selected cell if its empty or wrong number is filled.\n   */\n  function onClickHint() {\n    if (cellSelected !== -1) {\n      _fillCell(cellSelected, solvedArray[cellSelected]);\n    }\n  }\n\n  /**\n   * Toggle Mistakes Mode\n   */\n  function onClickMistakesMode() {\n    setMistakesMode(!mistakesMode);\n  }\n\n  /**\n   * Toggle Fast Mode\n   */\n  function onClickFastMode() {\n    if (fastMode) {\n      setNumberSelected(\"0\");\n    }\n    setCellSelected(-1);\n    setFastMode(!fastMode);\n  }\n\n  /**\n   * Close the overlay on Click.\n   */\n  function onClickOverlay() {\n    setOverlay(false);\n    _createNewGame();\n  }\n\n  /**\n   * On load, create a New Game.\n   */\n  useEffect(() => {\n    _createNewGame();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <>\n      <Header onChangeDifficulty={onChangeDifficulty} difficulty={difficulty} />\n      <div className={overlay ? \"container blur\" : \"container\"}>\n        <div className=\"innercontainer\">\n          <GameSection onClick={(indexOfArray) => onClickCell(indexOfArray)} />\n\n          <StatusSection\n            onClickNewGame={onClickNewGame}\n            onClickNumber={(number) => onClickNumber(number)}\n            onChange={(e) => onChangeDifficulty(e)}\n            onClickUndo={onClickUndo}\n            onClickErase={onClickErase}\n            onClickHint={onClickHint}\n            onClickMistakesMode={onClickMistakesMode}\n            onClickFastMode={onClickFastMode}\n          />\n        </div>\n      </div>\n      <div\n        className={overlay ? \"overlay overlay--visible\" : \"overlay\"}\n        onClick={onClickOverlay}\n      >\n        <h2 className=\"overlay__text\">\n          You <span className=\"overlay__textspan1\">solved</span>{\" \"}\n          <span className=\"overlay__textspan2\">it!</span>\n        </h2>\n      </div>\n    </>\n  );\n};\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: grey[500],\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nimport \"./App.css\";\r\nimport { SudokuProvider } from \"./context/SudokuContext\";\r\nimport { Game } from \"./Game\";\r\nimport theme from \"./themes/defaultTheme\";\r\nimport { SettingsProvider } from \"./context/SettingsContext\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <SudokuProvider>\r\n        <SettingsProvider>\r\n          <Game />\r\n        </SettingsProvider>\r\n      </SudokuProvider>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["features/settingsSlice.js","components/TitleTypography.js","components/Header.js","components/RulesTile.js","themes/defaultTheme.js","components/PlayersList.js","components/Timer.js","components/InfoContainer.js","solver/sudoku.js","solver/UniqueSudoku.js","components/SettingPicker.js","components/PlayersForm.js","components/SettingsContainer.js","components/puzzle/layout/GameSection.js","components/NumberSelector.js","features/gameSlice.js","components/MainContainer.js","components/mock/Game.js","App.js","serviceWorker.js","index.js"],"names":["DIFFICULTY","TIMERLENGTH","initialState","difficulty","timerLength","players","id","name","score","current","time","timerSetting","currentTime","format","Date","timeTurnStarted","isPaused","settingsSlice","createSlice","reducers","setDifficulty","state","action","payload","setTimerLength","nextPlayer","currentPlayer","find","player","length","setCurrentTime","setTimeTurnStarted","addPoint","minusPoint","resetScore","forEach","updatePlayersList","setIsPaused","actions","titleTheme","createMuiTheme","typography","fontFamily","useStyles","makeStyles","theme","console","log","title","flexGrow","fontSize","TitleTypography","children","classes","ThemeProvider","Typography","className","color","root","backgroundColor","alignItems","header","minHeight","Header","AppBar","position","elevation","Toolbar","Button","size","variant","disableElevation","rulesContainer","width","borderRadius","margin","padding","RulesTile","showRules","Fade","in","mountOnEnter","unmountOnExit","Paper","paragraph","Colors","grey","palette","secondary","main","mainBackgroundColor","selectBackgroundColor","join","h1","fontWeight","h5","h6","body1","playerListContainer","playerList","display","flexDirection","height","playerHeaderRow","playerRow","playerRowSelected","borderLeft","playerRowTitle","playerRowStats","playerRowStatElement","textAlign","PlayerRow","selectedStyles","PlayersList","map","i","timerContainer","timer","justifyContent","primary","mapDispatchToProps","connect","settings","won","game","useEffect","setTimeout","timeRemaining","differenceInSeconds","leftContainer","timerPauseContainer","playPauseContainer","playPause","cursor","border","inGame","Slide","direction","onClick","sudoku","ROWS","COLS","DIGITS","SQUARES","UNITS","SQUARE_UNITS_MAP","SQUARE_PEERS_MAP","BLANK_CHAR","BLANK_BOARD","generate","unique","easy","_force_range","NR_SQUARES","blank_board","candidates","_get_candidates_map","shuffled_squares","_shuffle","si","square","rand_candidate_idx","_rand_range","rand_candidate","_assign","single_candidates","push","_strip_dups","board","givens_idxs","nr_givens","target","parseInt","substr","solve","reverse","report","validate_board","_in","result","_search","solution","get_candidates","candidates_map","rows","cur_row","candidate_map","squares_values_map","_get_square_vals_map","val","max_nr_candidates","nr_candidates","min_nr_candidates","min_candidates_square","min_candidates","vi","candidates_copy","JSON","parse","stringify","candidates_next","other_vals","replace","ovi","other_val","_eliminate","target_val","pi","peer","candidates_new","ui","unit","val_places","unit_square","squares_vals_map","_get_square_units_map","squares","units","square_unit_map","cur_square","cur_square_units","cur_unit","indexOf","_get_square_peers_map","units_map","square_peers_map","cur_square_peers","sui","cur_unit_square","_get_all_units","cols","ri","_cross","ci","row_squares","col_squares","rsi","csi","board_string_to_grid","board_string","board_grid_to_string","board_grid","r","c","print_board","display_string","a","b","ai","bi","v","seq","_first_true","shuffled","ti","max","min","Math","floor","random","seq_set","dup_map","e","nr","nullArray","_getIndexOfCell","box","cell","_getBoxCenter","row","column","_cellAvailable","tempInitArray","value","getUniqueSudoku","newDifficulty","temporaryInitArray","slice","temporarySolvedArray","str","index","solvedArray","minimumCells","maximumCells","totalCells","currentDifficulty","boxCounts","boxesAvailable","cellsAvailable","j","_generateUniqueSudoku","settingButton","settingButtonSelected","SettingButton","currentSetting","buttonStyle","Grid","item","SettingPicker","options","container","justify","option","addRemovePlayerButton","PlayerTextField","updatePlayerName","xs","TextField","label","fullWidth","onChange","PlayersForm","addPlayerField","removePlayerField","spacing","disabled","startButton","settingPickersContainer","handleStartGameAnimation","createNewGame","useState","formPlayers","setFormPlayers","autoFillNames","finalPlayerList","newPlayer","updatedPlayerForm","slicedForm","playerId","newFormPlayers","updatedPlayer","initArray","gameArray","cellSelected","colorFlash","props","_selectedCell","indexOfArray","highlight","_unselectedCell","handleClick","_isCellSameAsSelectedCell","numbersContainer","number","NumberSelector","onClickNumber","toString","numberSelected","timeGameStarted","gameSlice","setNumberSelected","setGameArray","setTimeGameStarted","setCellSelected","setInitArray","setWon","setColorFlash","settingsRoot","puzzleRoot","puzzlePlaceholder","setSolvedArray","history","setHistory","_fillCell","tempArray","tempHistory","every","cellIndex","_isSolved","_userFillCell","triggerCorrectAnswer","triggerWrongAnswer","finishCorrectAnswer","clearWrongAnswer","onClickCell","infoWrapper","onChangeDifficulty","setInGame","setShowRules","Switch","checked","InfoContainer","MainContainer","rootReducer","combineReducers","settingsReducer","gameReducer","store","configureStore","reducer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAGaA,EACR,OADQA,EAER,MAFQA,EAGR,OAGQC,EACJ,GADIA,EAEH,GAFGA,EAGL,GAGKC,EAAe,CAC1BC,WAAYH,EACZI,YAAaH,EACbI,QAAS,CACP,CACEC,GAAI,EACJC,KAAM,GACNC,MAAO,EACPC,SAAS,EACTC,KAAM,GAER,CACEJ,GAAI,EACJC,KAAM,GACNC,MAAO,EACPC,SAAS,EACTC,KAAM,IAGVC,aAAc,GACdC,YAAaC,YAAO,IAAIC,KAAQ,yBAChCC,gBAAiBF,YAAO,IAAIC,KAAQ,yBACpCE,UAAU,GAGNC,EAAgBC,YAAY,CAChCX,KAAM,WACNL,eACAiB,SAAU,CACRC,cAAe,SAACC,EAAOC,GAErB,OADAD,EAAMlB,WAAamB,EAAOC,QACnBF,GAETG,eAAgB,SAACH,EAAOC,GAEtB,OADAD,EAAMjB,YAAckB,EAAOC,QACpBF,GAETI,WAAY,SAACJ,GACX,IAAMK,EAAgBL,EAAMhB,QAAQsB,MAClC,SAACC,GAAD,OAA+B,IAAnBA,EAAOnB,WAcrB,OAXAY,EAAMhB,QAAQsB,MAAK,SAACC,GAAD,OAAYA,IAAWF,KAAejB,SAAU,EAE/DiB,EAAcpB,KAAOe,EAAMhB,QAAQwB,OAAS,EAE9CR,EAAMhB,QAAQsB,MACZ,SAACC,GAAD,OAAYA,EAAOtB,KAAOoB,EAAcpB,GAAK,KAC7CG,SAAU,EAGZY,EAAMhB,QAAQsB,MAAK,SAACC,GAAD,OAA0B,IAAdA,EAAOtB,MAAUG,SAAU,EAErDY,GAETS,eAAgB,SAACT,GAEf,OADAA,EAAMT,YAAcC,YAAO,IAAIC,KAAQ,yBAChCO,GAETU,mBAAoB,SAACV,GAEnB,OADAA,EAAMN,gBAAkBF,YAAO,IAAIC,KAAQ,yBACpCO,GAETW,SAAU,SAACX,GAET,OADAA,EAAMhB,QAAQsB,MAAK,SAACC,GAAD,OAA+B,IAAnBA,EAAOnB,WAAkBD,OAAS,EAC1Da,GAETY,WAAY,SAACZ,GAEX,OADAA,EAAMhB,QAAQsB,MAAK,SAACC,GAAD,OAA+B,IAAnBA,EAAOnB,WAAkBD,OAAS,EAC1Da,GAETa,WAAY,SAACb,GAEX,OADAA,EAAMhB,QAAQ8B,SAAQ,SAACP,GAAD,OAAaA,EAAOpB,MAAQ,KAC3Ca,GAETe,kBAAmB,SAACf,EAAOC,GAEzB,OADAD,EAAMhB,QAAUiB,EAAOC,QAChBF,GAETgB,YAAa,SAAChB,EAAOC,GAEnB,OADAD,EAAML,SAAWM,EAAOC,QACjBF,M,EAgBTJ,EAAcqB,QAVhBlB,E,EAAAA,cACAI,E,EAAAA,eACAC,E,EAAAA,WACAK,E,EAAAA,eACAC,E,EAAAA,mBACAC,E,EAAAA,SACAC,E,EAAAA,WACAC,E,EAAAA,WACAE,E,EAAAA,kBACAC,E,EAAAA,YAGapB,IAAf,Q,4CC1GMsB,EAAaC,YAAe,CAChCC,WAAY,CACVC,WAAY,wBAIVC,EAAYC,aAAW,SAACC,GAE5B,OADAC,QAAQC,IAAI,QAASF,GACd,CACLG,MAAO,CACLC,SAAU,EACVC,SAAU,QAiBDC,EAZS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnBC,EAAUV,IAEhB,OACE,cAACW,EAAA,EAAD,CAAeT,MAAON,EAAtB,SACE,cAACgB,EAAA,EAAD,CAAYC,UAAWH,EAAQL,MAAOS,MAAM,UAA5C,SACGL,OCtBHT,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCa,KAAM,CACJT,SAAU,EACVU,gBAAiB,QACjBC,WAAY,UAEdC,OAAQ,CACNC,UAAW,aA0BAC,EAtBA,WACb,IAAMV,EAAUV,IAEhB,OACE,qBAAKa,UAAWH,EAAQK,KAAxB,SACE,cAACM,EAAA,EAAD,CAAQC,SAAS,SAASR,MAAM,cAAcS,UAAW,EAAzD,SACE,eAACC,EAAA,EAAD,CAASX,UAAWH,EAAQQ,OAA5B,UACE,cAAC,EAAD,4BACA,cAACO,EAAA,EAAD,CACEC,KAAK,QACLC,QAAQ,YACRb,MAAM,UACNc,kBAAgB,EAJlB,2B,kBCrBJ5B,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2B,eAAgB,CACdC,MAAO,QACPd,gBAAiB,QACjBe,aAAc,GACdC,OAAQ,GACRC,QAAS,QA0CEC,EAtCG,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACbzB,EAAUV,IAChB,OACE,cAACoC,EAAA,EAAD,CAAMC,GAAIF,EAAWG,cAAY,EAACC,eAAa,EAA/C,SACE,eAACC,EAAA,EAAD,CAAO3B,UAAWH,EAAQmB,eAAgBN,UAAW,EAArD,UACE,cAACX,EAAA,EAAD,CAAYe,QAAQ,KAAKb,MAAM,UAAU2B,WAAS,EAAlD,mBAGA,cAAC7B,EAAA,EAAD,CAAYe,QAAQ,QAAQb,MAAM,YAAY2B,WAAS,EAAvD,wNAKA,cAAC7B,EAAA,EAAD,CAAYe,QAAQ,QAAQb,MAAM,YAAY2B,WAAS,EAAvD,iGAIA,cAAC7B,EAAA,EAAD,CAAYe,QAAQ,KAAKb,MAAM,UAAU2B,WAAS,EAAlD,8BAGA,cAAC7B,EAAA,EAAD,CAAYe,QAAQ,KAApB,4BACA,cAACf,EAAA,EAAD,CAAYe,QAAQ,QAAQb,MAAM,YAAY2B,WAAS,EAAvD,kFAIA,cAAC7B,EAAA,EAAD,CAAYe,QAAQ,KAApB,8BACA,cAACf,EAAA,EAAD,CAAYe,QAAQ,QAAQb,MAAM,YAAY2B,WAAS,EAAvD,mDAGA,cAAC7B,EAAA,EAAD,CAAYe,QAAQ,KAApB,4BACA,cAACf,EAAA,EAAD,CAAYe,QAAQ,QAAQb,MAAM,YAAY2B,WAAS,EAAvD,wD,gEC3CKC,GACF,UADEA,GAEc,UAIrBxC,IAHGyC,KAAK,KAGA9C,YAAe,CAC3B+C,QAAS,CACPC,UAAW,CACTC,KAAMH,KAAK,MAEbI,oBAAqBJ,KAAK,KAC1BK,sBAAuB,WAEzBlD,WAAY,CACVC,WAAY,CAAC,QAAS,aAAakD,KAAK,SAI5C/C,GAAMJ,WAAWoD,GAAGC,WAAa,IACjCjD,GAAMJ,WAAWsD,GAAGD,WAAa,IACjCjD,GAAMJ,WAAWuD,GAAGF,WAAa,IACjCjD,GAAMJ,WAAWwD,MAAM/C,SAAW,OAEnBL,UCrBTF,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCqD,oBAAqB,CACnBjD,SAAU,EACV2B,QAAS,IAEXuB,WAAY,CACVC,QAAS,OACTC,cAAe,SACf3B,aAAc,OACd4B,OAAQ,QAEVC,gBAAiB,CACfD,OAAQ,GACRF,QAAS,OACTxC,WAAY,SACZgB,QAAS,UAEX4B,UAAW,CACTvD,SAAU,EACVmD,QAAS,OACTxC,WAAY,SACZgB,QAAS,iBAEX6B,kBAAmB,CACjBxD,SAAU,EACVyD,WAAW,cAAD,OAAgBrB,IAC1B1B,gBAAiB0B,GACjBe,QAAS,OACTxC,WAAY,SACZgB,QAAS,SACTkB,WAAY,IACZ,eAAgB,CACdpB,aAAc,kBAGlBiC,eAAgB,CACdlC,MAAO,MACPvB,SAAU,IAEZ0D,eAAgB,CACdnC,MAAO,MACP2B,QAAS,QAEXS,qBAAsB,CACpBpC,MAAO,MACPqC,UAAW,SACX5D,SAAU,QAIR6D,GAAY,SAAC,GAAgB,IAAdnF,EAAa,EAAbA,OACbyB,EAAUV,KACVqE,EAAiBpF,EAAOnB,QAC1B4C,EAAQoD,kBACRpD,EAAQmD,UACZ,OACE,sBAAKhD,UAAWwD,EAAhB,UACE,qBAAKxD,UAAWH,EAAQsD,eAAxB,SAAyC/E,EAAOrB,OAChD,sBAAKiD,UAAWH,EAAQuD,eAAxB,UACE,qBAAKpD,UAAWH,EAAQwD,qBAAxB,SAA+CjF,EAAOpB,QACtD,qBAAKgD,UAAWH,EAAQwD,qBAAxB,SAA+CjF,EAAOlB,cA2B/CuG,GArBK,SAAC,GAAiB,IAAf5G,EAAc,EAAdA,QACfgD,EAAUV,KAEhB,OACE,qBAAKa,UAAWH,EAAQ6C,oBAAxB,SACE,eAACf,EAAA,EAAD,CAAO3B,UAAWH,EAAQ8C,WAAYjC,UAAW,EAAjD,UACE,sBAAKV,UAAWH,EAAQkD,gBAAxB,UACE,qBAAK/C,UAAWH,EAAQsD,iBACxB,sBAAKnD,UAAWH,EAAQuD,eAAxB,UACE,qBAAKpD,UAAWH,EAAQwD,qBAAxB,mBACA,qBAAKrD,UAAWH,EAAQwD,qBAAxB,wBAGHxG,EAAQ6G,KAAI,SAACtF,EAAQuF,GAAT,OACX,cAAC,GAAD,CAAmBvF,OAAQA,GAAXuF,Y,UCxEpBxE,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCuE,eAAgB,CACd3C,MAAO,QACPG,QAAS,QAEXyC,MAAO,CACLjB,QAAS,OACTE,OAAQ,OACRgB,eAAgB,SAChB1D,WAAY,SACZc,aAAc,OACdf,gBAAiBd,EAAM0C,QAAQgC,QAAQ9B,KACvChC,MAAO,aAgEL+D,GAAqB,CACzB/F,aACAK,iBACAC,qBACAE,cAGawF,gBAfS,SAACpG,GAAD,MAAY,CAClChB,QAASgB,EAAMqG,SAASrH,QACxBM,aAAcU,EAAMqG,SAAS/G,aAC7BC,YAAaS,EAAMqG,SAAS9G,YAC5BG,gBAAiBM,EAAMqG,SAAS3G,gBAChC4G,IAAKtG,EAAMuG,KAAKD,OAUsBH,GAAzBC,EA/DD,SAAC,GASR,IARLhG,EAQI,EARJA,WACAd,EAOI,EAPJA,aACAI,EAMI,EANJA,gBACAH,EAKI,EALJA,YACAkB,EAII,EAJJA,eACAC,EAGI,EAHJA,mBACA4F,EAEI,EAFJA,IACA1F,EACI,EADJA,WAEMoB,EAAUV,KAEhBkF,qBAAU,WAIHF,GAAKG,YAAW,WAFnBhG,MAEiC,OAClC,CAAClB,EAAakB,EAAgB6F,IAEjC,IAIMI,EAAgBpH,EAJDqH,aACnB,IAAIlH,KAAKF,GACT,IAAIE,KAAKC,IAgBX,OAZA8G,qBAAU,WAOJE,EAAgB,IALlB9F,IACAR,IACAM,OAMD,CAACA,EAAoBN,EAAYsG,EAAe9F,IAGjD,mCACE,qBAAKuB,UAAWH,EAAQ+D,eAAxB,SACE,cAACjC,EAAA,EAAD,CAAO3B,UAAWH,EAAQgE,MAAOnD,UAAW,EAA5C,SACE,cAACX,EAAA,EAAD,CAAYe,QAAQ,KAApB,SAA0ByD,aC9D9BpF,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCoF,cAAe,CACb7B,QAAS,OACT3B,MAAO,OACP4B,cAAe,UAEjB6B,oBAAqB,CACnB9B,QAAS,OACTE,OAAQ,SAGV6B,mBAAoB,CAClBvD,QAAS,IAEXwD,UAAW,CACTC,OAAQ,UACRjC,QAAS,OACTE,OAAQ,OACR7B,MAAO,QACP6C,eAAgB,SAChB1D,WAAY,SACZc,aAAc,OACdxB,SAAU,OACVO,MAAOZ,EAAM0C,QAAQgC,QAAQ9B,KAE7B,UAAW,CACT9B,gBAAiB0B,GACjBiD,OAAO,aAAD,OAAejD,UAuCrBmC,GAAqB,CACzBnF,eAGaoF,gBATS,SAACpG,GAAD,MAAY,CAClChB,QAASgB,EAAMqG,SAASrH,QACxBW,SAAUK,EAAMqG,SAAS1G,YAOawG,GAAzBC,EAtCW,SAAC,GAAgD,IAA9Cc,EAA6C,EAA7CA,OAAQlI,EAAqC,EAArCA,QAASW,EAA4B,EAA5BA,SAAUqB,EAAkB,EAAlBA,YAChDgB,EAAUV,KAEVyF,EAAYpH,EAChB,cAAC,KAAD,CAAekC,SAAS,YAExB,cAAC,IAAD,CAAWA,SAAS,YAEtB,OACE,cAACsF,EAAA,EAAD,CAAOC,UAAU,QAAQzD,GAAIuD,EAAQtD,cAAY,EAACC,eAAa,EAA/D,SACE,sBAAK1B,UAAWH,EAAQ4E,cAAxB,UACE,sBAAKzE,UAAWH,EAAQ6E,oBAAxB,UACE,cAAC,GAAD,IACA,qBAAK1E,UAAWH,EAAQ8E,mBAAxB,SACE,cAAChD,EAAA,EAAD,CACE3B,UAAWH,EAAQ+E,UACnBlE,UAAW,EACXwE,QAAS,kBAAMrG,GAAarB,IAH9B,SAKGoH,SAIP,cAAC,GAAD,CAAa/H,QAASA,Y,sCCzDtBsI,GAAS,CACbA,OAAgB,aACZC,GAAO,YACPC,GAAOF,GAAOG,OACdC,GAAU,KAEVC,GAAQ,KACRC,GAAmB,KACnBC,GAAmB,KAOnBlJ,GAAa,CACb,KAAgB,GAChB,OAAgB,GAChB,KAAgB,GAChB,YAAgB,GAChB,OAAgB,GAChB,QAAgB,IAIpB2I,GAAOQ,WAAa,IACpBR,GAAOS,YAAc,oFAiBrBT,GAAOU,SAAW,SAASlJ,EAAYmJ,GAqCV,kBAAfnJ,GAAiD,qBAAfA,IACxCA,EAAaH,GAAWG,IAAeH,GAAWuJ,MAItDpJ,EAAawI,GAAOa,aAAarJ,EAAYsJ,GA3EhC,IA+EbH,EAASA,IAAU,EAInB,IADA,IAAII,EAAc,GACVvC,EAAI,EAAGA,EAlFF,KAkFoBA,EAC7BuC,GAAe,IAEnB,IAAIC,EAAahB,GAAOiB,oBAAoBF,GAGxCG,EAAmBlB,GAAOmB,SAASf,IACvC,IAAI,IAAIgB,KAAMF,EAAiB,CAC3B,IAAIG,EAASH,EAAiBE,GAI1BE,EACItB,GAAOuB,YAAYP,EAAWK,GAAQnI,QAC1CsI,EAAiBR,EAAWK,GAAQC,GACxC,IAAItB,GAAOyB,QAAQT,EAAYK,EAAQG,GACnC,MAIJ,IAAIE,EAAoB,GACxB,IAAIN,KAAMhB,GAG2B,IAA9BY,EAFHK,EAASjB,GAAQgB,IAEKlI,QAClBwI,EAAkBC,KAAKX,EAAWK,IAM1C,GAAGK,EAAkBxI,QAAU1B,GACvBwI,GAAO4B,YAAYF,GAAmBxI,QAAU,EAAE,CACtD,IAAI2I,EAAQ,GACRC,EAAc,GAClB,IAAItD,KAAK4B,GAE4B,IAA9BY,EADHK,EAASjB,GAAQ5B,IACKtF,QAClB2I,GAASb,EAAWK,GACpBS,EAAYH,KAAKnD,IAEjBqD,GAAS7B,GAAOQ,WAMxB,IAAIuB,EAAYD,EAAY5I,OAC5B,GAAG6I,EAAYvK,EAEX,IADAsK,EAAc9B,GAAOmB,SAASW,GAC1BtD,EAAI,EAAGA,EAAIuD,EAAYvK,IAAcgH,EAAE,CACvC,IAAIwD,EAASC,SAASH,EAAYtD,IAClCqD,EAAQA,EAAMK,OAAO,EAAGF,GAAUhC,GAAOQ,WACrCqB,EAAMK,OAAOF,EAAS,GAMlC,GAAGhC,GAAOmC,MAAMN,GACZ,OAAOA,GAMnB,OAAO7B,GAAOU,SAASlJ,IAK3BwI,GAAOmC,MAAQ,SAASN,EAAOO,GAY3B,IAAIC,EAASrC,GAAOsC,eAAeT,GACnC,IAAc,IAAXQ,EACC,MAAMA,EAIV,IAAIN,EAAY,EAChB,IAAI,IAAIvD,KAAKqD,EACNA,EAAMrD,KAAOwB,GAAOQ,YAAcR,GAAOuC,IAAIV,EAAMrD,GAAIwB,GAAOG,WAC3D4B,EAGV,GAAGA,EAlLU,GAoLT,KAAM,uCAIVK,EAAUA,IAAW,EAErB,IAAIpB,EAAahB,GAAOiB,oBAAoBY,GACxCW,EAASxC,GAAOyC,QAAQzB,EAAYoB,GAExC,GAAGI,EAAO,CACN,IAAIE,EAAW,GACf,IAAI,IAAIrB,KAAUmB,EACdE,GAAYF,EAAOnB,GAEvB,OAAOqB,EAEX,OAAO,GAGX1C,GAAO2C,eAAiB,SAASd,GAS7B,IAAIQ,EAASrC,GAAOsC,eAAeT,GACnC,IAAc,IAAXQ,EACC,MAAMA,EAIV,IAAIO,EAAiB5C,GAAOiB,oBAAoBY,GAGhD,IAAIe,EACA,OAAO,EAIX,IAAIC,EAAO,GACPC,EAAU,GACVtE,EAAI,EACR,IAAI,IAAI6C,KAAUuB,EAAe,CAC7B,IAAI5B,EAAa4B,EAAevB,GAChCyB,EAAQnB,KAAKX,GACVxC,EAAI,IAAM,IACTqE,EAAKlB,KAAKmB,GACVA,EAAU,MAEZtE,EAEN,OAAOqE,GAGX7C,GAAOiB,oBAAsB,SAASY,GAOlC,IAAIQ,EAASrC,GAAOsC,eAAeT,GACnC,IAAc,IAAXQ,EACC,MAAMA,EAGV,IAAIU,EAAgB,GAChBC,EAAqBhD,GAAOiD,qBAAqBpB,GAGrD,IAAI,IAAIT,KAAMhB,GACV2C,EAAc3C,GAAQgB,IAAOpB,GAAOG,OAKxC,IAAI,IAAIkB,KAAU2B,EAAmB,CACjC,IAAIE,EAAMF,EAAmB3B,GAE7B,GAAGrB,GAAOuC,IAAIW,EAAKlD,GAAOG,QAItB,IAHqBH,GAAOyB,QAAQsB,EAAe1B,EAAQ6B,GAIvD,OAAO,EAKnB,OAAOH,GAGX/C,GAAOyC,QAAU,SAASzB,EAAYoB,GAOlC,IAAIpB,EACA,OAAO,EAIXoB,EAAUA,IAAW,EAIrB,IAAIe,EAAoB,EAGxB,IAAI,IAAI/B,KAAMhB,GAAQ,CAClB,IAAIiB,EAASjB,GAAQgB,GAEjBgC,EAAgBpC,EAAWK,GAAQnI,OAEpCkK,EAAgBD,IACfA,EAAoBC,EAEI/B,GAGhC,GAAyB,IAAtB8B,EACC,OAAOnC,EAIX,IAAIqC,EAAoB,GACpBC,EAAwB,KAC5B,IAAIlC,KAAMhB,IAGNgD,EAAgBpC,EAFhBK,EAASjB,GAAQgB,IAEkBlI,QAEhBmK,GAAqBD,EAAgB,IACpDC,EAAoBD,EACpBE,EAAwBjC,GAQhC,IAAIkC,EAAiBvC,EAAWsC,GAChC,GAAIlB,GAiBA,IAAIoB,EAAKD,EAAerK,OAAS,EAAGsK,GAAM,IAAKA,EAU3C,GATAN,EAAMK,EAAeC,GAGrBC,EAAkBC,KAAKC,MAAMD,KAAKE,UAAU5C,IAC5C6C,EAAkB7D,GAAOyC,QACrBzC,GAAOyB,QAAQgC,EAAiBH,EAAuBJ,GACvDd,GAIA,OAAOyB,OA3Bf,IAAI,IAAIL,KAAMD,EAAe,CACzB,IAAIL,EAAMK,EAAeC,GAGrBC,EAAkBC,KAAKC,MAAMD,KAAKE,UAAU5C,IAC5C6C,EAAkB7D,GAAOyC,QACzBzC,GAAOyB,QAAQgC,EAAiBH,EAAuBJ,IAG3D,GAAGW,EACC,OAAOA,EAwBnB,OAAO,GAGX7D,GAAOyB,QAAU,SAAST,EAAYK,EAAQ6B,GAS1C,IAAIY,EAAa9C,EAAWK,GAAQ0C,QAAQb,EAAK,IAKjD,IAAI,IAAIc,KAAOF,EAAW,CACtB,IAAIG,EAAYH,EAAWE,GAK3B,IAFIhE,GAAOkE,WAAWlD,EAAYK,EAAQ4C,GAItC,OAAO,EAIf,OAAOjD,GAGXhB,GAAOkE,WAAa,SAASlD,EAAYK,EAAQ6B,GAU7C,IAAIlD,GAAOuC,IAAIW,EAAKlC,EAAWK,IAC3B,OAAOL,EAIXA,EAAWK,GAAUL,EAAWK,GAAQ0C,QAAQb,EAAK,IAIrD,IAAIE,EAAgBpC,EAAWK,GAAQnI,OACvC,GAAqB,IAAlBkK,EAAoB,CACnB,IAAIe,EAAanD,EAAWK,GAE5B,IAAI,IAAI+C,KAAM7D,GAAiBc,GAAQ,CACnC,IAAIgD,EAAO9D,GAAiBc,GAAQ+C,GAEhCE,EACItE,GAAOkE,WAAWlD,EAAYqD,EAAMF,GAE5C,IAAIG,EACA,OAAO,GAMjB,GAAqB,IAAlBlB,EACD,OAAO,EAIX,IAAI,IAAImB,KAAMjE,GAAiBe,GAAQ,CACnC,IAAImD,EAAOlE,GAAiBe,GAAQkD,GAEhCE,EAAa,GACjB,IAAI,IAAIrD,KAAMoD,EAAK,CACf,IAAIE,EAAcF,EAAKpD,GACpBpB,GAAOuC,IAAIW,EAAKlC,EAAW0D,KAC1BD,EAAW9C,KAAK+C,GAMxB,GAAyB,IAAtBD,EAAWvL,OACV,OAAO,EAGJ,GAAyB,IAAtBuL,EAAWvL,UACjBoL,EACItE,GAAOyB,QAAQT,EAAYyD,EAAW,GAAIvB,IAG1C,OAAO,EAKnB,OAAOlC,GAQXhB,GAAOiD,qBAAuB,SAASpB,GAGnC,IAAI8C,EAAmB,GAGvB,GAAG9C,EAAM3I,SAAWkH,GAAQlH,OAExB,KAAM,iCAGN,IAAI,IAAIsF,KAAK4B,GACTuE,EAAiBvE,GAAQ5B,IAAMqD,EAAMrD,GAI7C,OAAOmG,GAGX3E,GAAO4E,sBAAwB,SAASC,EAASC,GAG7C,IAAIC,EAAkB,GAGtB,IAAI,IAAI3D,KAAMyD,EAAQ,CAClB,IAAIG,EAAaH,EAAQzD,GAGrB6D,EAAmB,GAIvB,IAAI,IAAIV,KAAMO,EAAM,CAChB,IAAII,EAAWJ,EAAMP,IAEgB,IAAlCW,EAASC,QAAQH,IAChBC,EAAiBtD,KAAKuD,GAK9BH,EAAgBC,GAAcC,EAGlC,OAAOF,GAGX/E,GAAOoF,sBAAwB,SAASP,EAASQ,GAI7C,IAAIC,EAAmB,GAGvB,IAAI,IAAIlE,KAAMyD,EAAQ,CAClB,IAAIG,EAAaH,EAAQzD,GACrB6D,EAAmBI,EAAUL,GAG7BO,EAAmB,GAGvB,IAAI,IAAIC,KAAOP,EAAiB,CAC5B,IAAIC,EAAWD,EAAiBO,GAEhC,IAAI,IAAIjB,KAAMW,EAAS,CACnB,IAAIO,EAAkBP,EAASX,IAEmB,IAA/CgB,EAAiBJ,QAAQM,IACpBA,IAAoBT,GACxBO,EAAiB5D,KAAK8D,IAMlCH,EAAiBN,GAAcO,EAGnC,OAAOD,GAGXtF,GAAO0F,eAAiB,SAAS7C,EAAM8C,GAGnC,IAAIb,EAAQ,GAGZ,IAAI,IAAIc,KAAM/C,EACViC,EAAMnD,KAAK3B,GAAO6F,OAAOhD,EAAK+C,GAAKD,IAIvC,IAAI,IAAIG,KAAMH,EACXb,EAAMnD,KAAK3B,GAAO6F,OAAOhD,EAAM8C,EAAKG,KAIvC,IAAIC,EAAc,CAAC,MAAO,MAAO,OAC7BC,EAAc,CAAC,MAAO,MAAO,OACjC,IAAI,IAAIC,KAAOF,EACX,IAAI,IAAIG,KAAOF,EACXlB,EAAMnD,KAAK3B,GAAO6F,OAAOE,EAAYE,GAAMD,EAAYE,KAI/D,OAAOpB,GAMX9E,GAAOmG,qBAAuB,SAASC,GAGnC,IAAIvD,EAAO,GACPC,EAAU,GACd,IAAI,IAAItE,KAAK4H,EACTtD,EAAQnB,KAAKyE,EAAa5H,IACvBA,EAAI,IAAM,IACTqE,EAAKlB,KAAKmB,GACVA,EAAU,IAGlB,OAAOD,GAGX7C,GAAOqG,qBAAuB,SAASC,GAInC,IADA,IAAIF,EAAe,GACXG,EAAI,EAAGA,EAAI,IAAKA,EACpB,IAAI,IAAIC,EAAI,EAAGA,EAAI,IAAKA,EACpBJ,GAAgBE,EAAWC,GAAGC,GAGtC,OAAOJ,GAOXpG,GAAOyG,YAAc,SAAS5E,GAK1B,IAAIQ,EAASrC,GAAOsC,eAAeT,GACnC,IAAc,IAAXQ,EACC,MAAMA,EAGV,IAMIqE,EAAiB,GAErB,IAAI,IAAIlI,KAAKqD,EAAM,CAIf6E,GAHa7E,EAAMrD,GATP,IAeTA,EAAI,IAAM,IACTkI,GAbY,MAiBblI,EAAI,IAAM,IACTkI,GApBQ,MAwBTlI,EAAI,KAAO,KACVkI,GAtBY,MA0BpBvM,QAAQC,IAAIsM,IAGhB1G,GAAOsC,eAAiB,SAAST,GAM7B,IAAIA,EACA,MAAO,cAIX,GA5pBa,KA4pBVA,EAAM3I,OACL,MAAO,wDAKX,IAAI,IAAIsF,KAAKqD,EACT,IAAI7B,GAAOuC,IAAIV,EAAMrD,GAAIwB,GAAOG,SAAW0B,EAAMrD,KAAOwB,GAAOQ,WAC3D,MAAO,gDAAkDhC,EACjD,KAAOqD,EAAMrD,GAK7B,OAAO,GAGXwB,GAAO6F,OAAS,SAASc,EAAGC,GAKxB,IAAIpE,EAAS,GACb,IAAI,IAAIqE,KAAMF,EACV,IAAI,IAAIG,KAAMF,EACVpE,EAAOb,KAAKgF,EAAEE,GAAMD,EAAEE,IAG9B,OAAOtE,GAGXxC,GAAOuC,IAAM,SAASwE,EAAGC,GAGrB,OAA2B,IAApBA,EAAI7B,QAAQ4B,IAGvB/G,GAAOiH,YAAc,SAASD,GAI1B,IAAI,IAAIxI,KAAKwI,EACT,GAAGA,EAAIxI,GACH,OAAOwI,EAAIxI,GAGnB,OAAO,GAGXwB,GAAOmB,SAAW,SAAS6F,GAMvB,IADA,IAAIE,EAAW,GACP1I,EAAI,EAAGA,EAAIwI,EAAI9N,SAAUsF,EAC7B0I,EAASvF,MAAK,GAGlB,IAAInD,KAAKwI,EAAI,CAGT,IAFA,IAAIG,EAAKnH,GAAOuB,YAAYyF,EAAI9N,QAE1BgO,EAASC,IACXA,EAAMA,EAAK,EAAMH,EAAI9N,OAAS,EAAK,EAAKiO,EAAK,EAGjDD,EAASC,GAAMH,EAAIxI,GAGvB,OAAO0I,GAGXlH,GAAOuB,YAAc,SAAS6F,EAAKC,GAM/B,GADAA,EAAMA,GAAO,EACVD,EACC,OAAOE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMC,IAAQA,EAGjD,KAAM,mBAIdrH,GAAO4B,YAAc,SAASoF,GAG1B,IAAIS,EAAU,GACVC,EAAU,GACd,IAAI,IAAIlJ,KAAKwI,EAAI,CACb,IAAIW,EAAIX,EAAIxI,GACRkJ,EAAQC,KACRF,EAAQ9F,KAAKgG,GACbD,EAAQC,IAAK,GAGrB,OAAOF,GAGXzH,GAAOa,aAAe,SAAS+G,EAAIR,EAAKC,GAOpC,OADAO,EAAKA,GAAM,IADXP,EAAMA,GAAO,GAGFA,EAERO,EAAKR,EACGA,EAEJQ,GAvvBPxH,GAAsBJ,GAAO6F,OAAO5F,GAAMC,IAC1CG,GAAsBL,GAAO0F,eAAezF,GAAMC,IAClDI,GAAsBN,GAAO4E,sBAAsBxE,GAASC,IAC5DE,GAAsBP,GAAOoF,sBAAsBhF,GACvBE,IAyvBzB,IC7tBPuH,GAAY,CACd,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAmCF,SAASC,GAAgBC,EAAKC,GAAO,IAAD,EA7BpC,SAAuBD,GAErB,OAAQA,GACN,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,GACb,KAAK,EACH,MAAO,CAAC,EAAG,IAUKE,CAAcF,GADA,mBAC7BG,EAD6B,KACxBC,EADwB,KAGlC,OAAQH,GACN,KAAK,EACHE,IACAC,IACA,MAEF,KAAK,EACHD,IACA,MAEF,KAAK,EACHA,IACAC,IACA,MAEF,KAAK,EACHA,IACA,MAEF,KAAK,EACH,MAEF,KAAK,EACHA,IACA,MAEF,KAAK,EACHD,IACAC,IACA,MAEF,KAAK,EACHD,IACA,MAEF,KAAK,EACHA,IACAC,IAIJ,OAAa,EAAND,EAAUC,EAMnB,SAASC,GAAeC,EAAeN,EAAKO,GAC1C,MAAsD,MAA/CD,EAAcP,GAAgBC,EAAKO,IAAkB,EAAI,EA4E3D,IAAMC,GAAkB,SAAC/Q,EAAYgR,GAC1C,IAAIC,EAAqBZ,GAAUa,QAC/BC,EAAuBd,GAAUa,QACjC1I,EDweOA,GCneP4I,EAAM5I,EAAOU,SAAS,IAuB1B,OArBA,aAAIkI,GAAKpP,SAAQ,SAAC8O,EAAOO,GACvBJ,EAAmBI,GAAmB,MAAVP,EAAgB,IAAMA,KAMpDM,EAAM5I,EAAOmC,MAAMyG,GACnB,aAAIA,GAAKpP,SAAQ,SAAC8O,EAAOO,GACvBF,EAAqBE,GAASP,KAYzB,CANPG,EA/FF,SAA+BK,EAAatR,EAAYgR,GACtD,IACIO,EAAcC,EAAcC,EAAYlB,EADxCmB,EAAoB1R,EAGpB6Q,EAAgBR,GAAUa,QAC1BS,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACrCC,EAAiB,GACjBC,EAAiB,GAEjBb,IAAeU,EAAoBV,GAEb,SAAtBU,GACFH,EAAe,EACfC,EAAe,EACfC,EAAa,IACkB,WAAtBC,GACTH,EAAe,EACfC,EAAe,EACfC,EAAa,KAEbF,EAAe,EACfC,EAAe,EACfC,EAAa,IAGf,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAGA,IACrBH,EAAUG,GACRlB,GAAeC,EAAeiB,EAAG,GACjClB,GAAeC,EAAeiB,EAAG,GACjClB,GAAeC,EAAeiB,EAAG,GACjClB,GAAeC,EAAeiB,EAAG,GACjClB,GAAeC,EAAeiB,EAAG,GACjClB,GAAeC,EAAeiB,EAAG,GACjClB,GAAeC,EAAeiB,EAAG,GACjClB,GAAeC,EAAeiB,EAAG,GACjClB,GAAeC,EAAeiB,EAAG,GAGrC,IAAK,IAAI9K,EAAI,EAAGA,EAAIyK,EAAYzK,IAAK,CACnC4K,EAAiB,GACjB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IACjBH,EAAUG,GAAKP,GACjBK,EAAezH,KAAK2H,GAGxB,GAAIF,EACF,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IACjBH,EAAUG,GAAKN,GACjBI,EAAezH,KAAK2H,GAI1BvB,EAAMqB,EAAgB9B,KAAKE,SAAW4B,EAAelQ,OAAU,GAE/DmQ,EAAiB,GACjB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAC0B,MAA3CjB,EAAcP,GAAgBC,EAAKuB,KACrCD,EAAe1H,KAAK2H,GAKxB,IAAIT,EAAQf,GAAgBC,EAFrBsB,EAAgB/B,KAAKE,SAAW6B,EAAenQ,OAAU,IAGhEmP,EAAcQ,GAASC,EAAYD,GACnCM,EAAUpB,KAGZ,OAAOM,EA4BckB,CACnBZ,EACAnR,EACAgR,GAG0BG,I,mBCxVxB3O,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCsP,cAAe,CACb9J,OAAQ,UACR5D,MAAO,OACP6B,OAAQ,QACRF,QAAS,OACTkB,eAAgB,SAChB1D,WAAY,SACZ0E,OAAQ,gCACR5D,aAAc,MAEd,UAAW,CACTf,gBAAiB0B,GACjB5B,MAAO4B,KAGX+M,sBAAuB,CACrB/J,OAAQ,UACR5D,MAAO,OACP6B,OAAQ,QACRF,QAAS,OACTkB,eAAgB,SAChB1D,WAAY,SACZc,aAAc,MACd4D,OAAO,aAAD,OAAejD,IAErB1B,gBAAiB0B,GACjB5B,MAAO4B,QAILgN,GAAgB,SAAC,GAAuC,IAArCpB,EAAoC,EAApCA,MAAO3P,EAA6B,EAA7BA,OAAQgR,EAAqB,EAArBA,eAChCjP,EAAUV,KACV4P,EACJD,IAAmBrB,EACf5N,EAAQ+O,sBACR/O,EAAQ8O,cACd,OACE,cAACK,GAAA,EAAD,CAAMC,MAAI,EAAV,SACE,qBAAKjP,UAAW+O,EAAa7J,QAAS,kBAAMpH,EAAO2P,IAAnD,SACE,cAAC1N,EAAA,EAAD,CAAYe,QAAQ,KAApB,SAA0B2M,SA0BnByB,GApBO,SAAC,GAAgD,IAA9C1P,EAA6C,EAA7CA,MAAO2P,EAAsC,EAAtCA,QAASL,EAA6B,EAA7BA,eAAgBhR,EAAa,EAAbA,OACvD,OACE,qCACE,cAACiC,EAAA,EAAD,CAAYe,QAAQ,KAAKb,MAAM,UAAU2B,WAAS,EAAlD,SACGpC,IAEH,cAACwP,GAAA,EAAD,CAAMI,WAAS,EAACC,QAAQ,gBAAxB,SACGF,EAAQzL,KAAI,SAAC4L,EAAQ3L,GAAT,OACX,cAAC,GAAD,CAEE8J,MAAO6B,EACPxR,OAAQA,EACRgR,eAAgBA,GAHXnL,Y,UCrDXxE,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCkQ,sBAAuB,CACrBtO,MAAO,QACP,UAAW,CACTd,gBAAiB0B,GACjB5B,MAAO4B,SAKP2N,GAAkB,SAAC,GAAyC,IAAvCxB,EAAsC,EAAtCA,MAAO5P,EAA+B,EAA/BA,OAAQqR,EAAuB,EAAvBA,iBACxC,OACE,cAACT,GAAA,EAAD,CAAMC,MAAI,EAACS,GAAI,GAAf,SACE,cAACC,GAAA,EAAD,CACE7O,QAAQ,WACR8O,MAAK,iBAAY5B,EAAQ,GACzB6B,WAAS,EACTC,SAAU,SAAChD,GAAD,OAAO2C,EAAiB3C,EAAG1O,EAAOtB,KAC5C2Q,MAAOrP,EAAOrB,UA6DPgT,GAvDK,SAAC,GAKd,IAJLlT,EAII,EAJJA,QACAmT,EAGI,EAHJA,eACAC,EAEI,EAFJA,kBACAR,EACI,EADJA,iBAEM5P,EAAUV,KAEhB,OACE,qCACE,eAAC6P,GAAA,EAAD,CAAMC,MAAI,EAACG,WAAS,EAACc,QAAS,EAA9B,UACE,cAAClB,GAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAClP,EAAA,EAAD,CAAYe,QAAQ,KAAKb,MAAM,UAA/B,+BAIDpD,EAAQ6G,KAAI,SAACtF,EAAQuF,GAAT,OACX,cAAC,GAAD,CAEEqK,MAAOrK,EACPvF,OAAQA,EACRqR,iBAAkBA,GAHb9L,SAOX,eAACqL,GAAA,EAAD,CAAMC,MAAI,EAACG,WAAS,EAACc,QAAS,EAAGb,QAAQ,gBAAzC,UACE,cAACL,GAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACrO,EAAA,EAAD,CACEZ,UAAWH,EAAQ0P,sBACnBzO,QAAQ,WACR+O,WAAS,EACT9O,kBAAgB,EAChBoP,SAAUtT,EAAQwB,QAAU,EAC5B6G,QAAS8K,EANX,SAQE,cAACjQ,EAAA,EAAD,CAAYe,QAAQ,QAApB,qBAGJ,cAACkO,GAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACrO,EAAA,EAAD,CACEZ,UAAWH,EAAQ0P,sBACnBzO,QAAQ,WACR+O,WAAS,EACT9O,kBAAgB,EAChBoP,SAAUtT,EAAQwB,QAAU,EAC5B6G,QAAS+K,EANX,SAQE,cAAClQ,EAAA,EAAD,CAAYe,QAAQ,QAApB,+BC/DN3B,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+Q,YAAa,CACXtN,OAAQ,QACR5B,aAAc,QAEhBmP,wBAAyB,CACvBvN,OAAQ,SAiINkB,GAAqB,CACzBpG,gBACAI,iBACAY,qBAGaqF,gBAZS,SAACpG,GAAD,MAAY,CAClClB,WAAYkB,EAAMqG,SAASvH,WAC3BC,YAAaiB,EAAMqG,SAAStH,YAC5BC,QAASgB,EAAMqG,SAASrH,WAScmH,GAAzBC,EAnIW,SAAC,GASpB,IARLtH,EAQI,EARJA,WACAiB,EAOI,EAPJA,cACAhB,EAMI,EANJA,YACAoB,EAKI,EALJA,eACAnB,EAII,EAJJA,QACA+B,EAGI,EAHJA,kBACA0R,EAEI,EAFJA,yBACAC,EACI,EADJA,cAEM1Q,EAAUV,KADZ,EAEkCqR,mBAAS3T,GAF3C,mBAEG4T,EAFH,KAEgBC,EAFhB,KAuCEC,EAAgB,WACpB,IAAMC,EAAkB,GAWxB,OAVAH,EAAY9R,SAAQ,SAACP,EAAQuF,GAC3B,GAAoB,KAAhBvF,EAAOrB,KAAa,CACtB,IAAM8T,EAAS,gBAAQzS,GACvByS,EAAU9T,KAAV,iBAA2B4G,EAAI,GAC/BiN,EAAgB9J,KAAK+J,QAErBD,EAAgB9J,KAAK1I,MAIlBwS,GAGT,OACE,qCACE,eAAC5B,GAAA,EAAD,CAAMC,MAAI,EAACG,WAAS,EAACc,QAAS,EAAGb,QAAQ,gBAAzC,UACE,cAACL,GAAA,EAAD,CAAMC,MAAI,EAACG,WAAS,EAACM,GAAI,EAAGQ,QAAS,EAArC,SACE,cAAC,GAAD,CACErT,QAAS4T,EACTT,eAxDa,WACrB,IACMa,EAAY,CAChB/T,GAFa2T,EAAYA,EAAYpS,OAAS,GAAGvB,GAAK,EAGtDC,KAAM,GACNC,MAAO,EACPC,SAAS,EACTC,KAAM,GAEF4T,EAAiB,uBAAOL,GAAP,CAAoBI,IAC3CH,EAAeI,IA+CPb,kBA5CgB,WACxB,IAAMc,EAAaN,EAAY5C,MAAM,GAAI,GACzC6C,EAAeK,IA2CPtB,iBAxCe,SAAC3C,EAAGkE,GAC3B,IAAMC,EAAc,aAAOR,GACrBS,EAAa,gBACdT,EAAYtS,MAAK,SAACC,GAAD,OAAYA,EAAOtB,KAAOkU,MAEhDE,EAAcnU,KAAO+P,EAAE3F,OAAOsG,MAC9BwD,EAAeD,GAAYE,EAC3BR,EAAeO,QAoCX,eAACjC,GAAA,EAAD,CACEC,MAAI,EACJG,WAAS,EACTM,GAAI,EACJzK,UAAU,SACVoK,QAAQ,gBACRrP,UAAWH,EAAQwQ,wBANrB,UAQE,cAACrB,GAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,GAAD,CACEzP,MAAM,QACN2P,QAAS,CACP1S,EACAA,EACAA,GAEFqS,eAAgBlS,EAChBkB,OAAQE,MAGZ,cAACgR,GAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,GAAD,CACEzP,MAAM,aACN2P,QAAS,CAAC3S,EAAcA,EAAcA,GACtCsS,eAAgBnS,EAChBmB,OAAQF,YAKhB,cAACgD,EAAA,EAAD,CACEE,QAAQ,YACRb,MAAM,UACNc,kBAAgB,EAChB8O,WAAS,EACThP,KAAK,QACLb,UAAWH,EAAQuQ,YACnBlL,QAtEkB,WACtB,IAAM0L,EAAkBD,IACxB/R,EAAkBgS,GAClBN,IACAC,KA2DE,SASE,cAACxQ,EAAA,EAAD,CAAYe,QAAQ,KAApB,gCC8DOmD,gBAPS,SAACpG,GAAD,MAAY,CAClCsT,UAAWtT,EAAMuG,KAAK+M,UACtBC,UAAWvT,EAAMuG,KAAKgN,UACtBC,aAAcxT,EAAMuG,KAAKiN,aACzBC,WAAYzT,EAAMuG,KAAKkN,cAGe,KAAzBrN,EApMK,SAACsN,GAAW,IACtBH,EAAmDG,EAAnDH,UAAWC,EAAwCE,EAAxCF,aAAcF,EAA0BI,EAA1BJ,UAAWG,EAAeC,EAAfD,WAC5ChS,QAAQC,IAAI,QAASgS,GACrB,IAAMvJ,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GA2DtC,SAASwJ,EAAcC,EAAchE,EAAOiE,EAAWJ,GACrD,MAAc,MAAV7D,EAE8B,MAA5B0D,EAAUM,GACRH,EAEA,oBACEtR,UAAS,wDAAmDsR,EAAnD,YADX,SAKG7D,GAHIgE,GAQT,oBACEzR,UAAS,wDAAmD0R,EAAnD,YADX,SAKGjE,GAHIgE,GASP,oBACEzR,UAAS,oDAA+C0R,EAA/C,YAETxM,QAAS,kBAAMqM,EAAMrM,QAAQuM,IAH/B,SAKGhE,GAHIgE,GAUT,oBACEzR,UAAS,iCAA4B0R,EAA5B,YAETxM,QAAS,kBAAMqM,EAAMrM,QAAQuM,IAH/B,SAKGhE,GAHIgE,GAYb,SAASE,EAAgBF,EAAchE,GACrC,GAAc,MAAVA,EAEF,MAAgC,MAA5B0D,EAAUM,GAEV,oBAAIzR,UAAU,oCAAd,SACGyN,GADoDgE,GAOvD,oBAAIzR,UAAU,gCAAd,SACGyN,GADgDgE,GAYvD,OACE,oBACEzR,UAAU,aAEVkF,QAAS,kBATO,SAACuM,GACdH,GACHC,EAAMrM,QAAQuM,GAOCG,CAAYH,IAH7B,SAKGhE,GAHIgE,GASb,OACE,yBAASzR,UAAU,OAAnB,SACE,uBAAOA,UAAU,cAAjB,SACE,gCACGgI,EAAKtE,KAAI,SAAC2J,GACT,OACE,oBAAIrN,UAAU,YAAd,SACGgI,EAAKtE,KAAI,SAAC4J,GACT,IAAMmE,EAAqB,EAANpE,EAAUC,EACzBG,EAAQ2D,EAAUK,GAExB,OAAIJ,IAAiBI,EACZD,EACLC,EACAhE,EACA,YACA6D,IAKgB,IAAlBD,GA1HlB,SAAmChE,EAAKC,GACtC,OAAI+D,IAAuB,EAANhE,EAAUC,GAGC,MAA5B8D,EAAUC,SAAd,EAuHgBQ,CAA0BxE,EAAKC,GAExBkE,EAAcC,EAAchE,EAAO,IAEnCkE,EAAgBF,EAAchE,OApBZJ,eC5JvClO,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyS,iBAAkB,CAChBlP,QAAS,OACTC,cAAe,SACf3B,aAAc,OACdD,MAAO,OACPE,OAAQ,OACRC,QAAS,SACT0C,eAAgB,eAChB1D,WAAY,UAEd2R,OAAQ,CACNnP,QAAS,OACTkB,eAAgB,SAChB1D,WAAY,SACZV,SAAU,GACVoD,OAAQ,GACR7B,MAAO,GAEP,UAAW,CACTd,gBAAiB0B,GACjBX,aAAc,IACdoB,WAAY,IACZrC,MAAO4B,GACPiD,OAAO,aAAD,OAAejD,UAyBZmQ,GApBQ,SAAC,GAA+B,IAA7BjN,EAA4B,EAA5BA,OAAQkN,EAAoB,EAApBA,cAC1BpS,EAAUV,KAChB,OACE,cAAC6F,EAAA,EAAD,CAAOC,UAAU,OAAOzD,GAAIuD,EAA5B,SACE,cAACpD,EAAA,EAAD,CAAO3B,UAAWH,EAAQiS,iBAAkBpR,UAAW,EAAvD,SACG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGgD,KAAI,SAACqO,GAChC,OACE,qBACE/R,UAAWH,EAAQkS,OACnB7M,QAAS,kBAAM+M,EAAcF,EAAOG,aAFtC,SAIGH,YC5CFrV,GAAe,CAC1ByV,eAAgB,IAChBf,UAAW,GACXgB,gBAAiB/U,YAAO,IAAIC,KAAQ,yBACpC+T,cAAe,EACfF,UAAW,GACXhN,KAAK,EACLmN,WAAY,MAGRe,GAAY3U,YAAY,CAC5BX,KAAM,OACNL,gBACAiB,SAAU,CACR2U,kBAAmB,SAACzU,EAAOC,GAEzB,OADAD,EAAMsU,eAAiBrU,EAAOC,QACvBF,GAET0U,aAAc,SAAC1U,EAAOC,GAEpB,OADAD,EAAMuT,UAAYtT,EAAOC,QAClBF,GAET2U,mBAAoB,SAAC3U,GAEnB,OADAA,EAAMuU,gBAAkB/U,YAAO,IAAIC,KAAQ,yBACpCO,GAET4U,gBAAiB,SAAC5U,EAAOC,GAEvB,OADAD,EAAMwT,aAAevT,EAAOC,QACrBF,GAET6U,aAAc,SAAC7U,EAAOC,GAEpB,OADAD,EAAMsT,UAAYrT,EAAOC,QAClBF,GAET8U,OAAQ,SAAC9U,EAAOC,GAEd,OADAD,EAAMsG,IAAMrG,EAAOC,QACZF,GAET+U,cAAe,SAAC/U,EAAOC,GAErB,OADAD,EAAMyT,WAAaxT,EAAOC,QACnBF,M,GAaTwU,GAAUvT,QAPZwT,G,GAAAA,kBACAC,G,GAAAA,aACAC,G,GAAAA,mBACAC,G,GAAAA,gBACAC,G,GAAAA,aACAC,G,GAAAA,OACAC,G,GAAAA,cAGaP,MAAf,QCjCMlT,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCwT,aAAc,CACZjQ,QAAS,OACTkB,eAAgB,gBAChBjB,cAAe,SACf5B,MAAO,QACP6B,OAAQ,QACR3B,OAAQ,OACRD,aAAc,OACdE,QAAS,QAEX0R,WAAY,CACVlQ,QAAS,OACTkB,eAAgB,SAChB1D,WAAY,SACZa,MAAO,QACP6B,OAAQ,QACR3B,OAAQ,OACRD,aAAc,QAEhB6R,kBAAmB,CACjB9R,MAAO,MACP6B,OAAQ,MACRgC,OAAQ,sBACRlC,QAAS,OACTkB,eAAgB,SAChB1D,WAAY,cAsKV4D,GAAqB,CACzByO,mBACAjU,WACAD,qBACAqU,iBACAL,gBACAI,UACA1U,aACAyU,gBACAJ,qBACAE,sBACA9T,cAGauF,gBAtBS,SAACpG,GAAD,MAAY,CAClCsU,eAAgBtU,EAAMuG,KAAK+N,eAC3BhB,UAAWtT,EAAMuG,KAAK+M,UACtBC,UAAWvT,EAAMuG,KAAKgN,UACtBC,aAAcxT,EAAMuG,KAAKiN,aACzB1U,WAAYkB,EAAMqG,SAASvH,cAiBWqH,GAAzBC,EAhLS,SAAC,GAmBlB,IAlBLc,EAkBI,EAlBJA,OACAuL,EAiBI,EAjBJA,yBACA6B,EAgBI,EAhBJA,eACAG,EAeI,EAfJA,kBACAG,EAcI,EAdJA,gBACAjU,EAaI,EAbJA,SACAD,EAYI,EAZJA,mBACAqU,EAWI,EAXJA,cACAzB,EAUI,EAVJA,UACAuB,EASI,EATJA,aACAtB,EAQI,EARJA,UACAmB,EAOI,EAPJA,aACAI,EAMI,EANJA,OACAtB,EAKI,EALJA,aACApT,EAII,EAJJA,WACAtB,EAGI,EAHJA,WACA6V,EAEI,EAFJA,mBACA9T,EACI,EADJA,WACI,EACkC8R,mBAAS,IAD3C,mBACGvC,EADH,KACgB+E,EADhB,OAE0BxC,mBAAS,IAFnC,mBAEGyC,EAFH,KAEYC,EAFZ,KAGErT,EAAUV,KAmBhB,SAASgU,EAAUnF,EAAOP,GACxB,GAAyB,MAArB0D,EAAUnD,GAAgB,CAE5B,IAAIoF,EAAYhC,EAAUvD,QACtBwF,EAAcJ,EAAQpF,QAG1BwF,EAAYvM,KAAKsK,EAAUvD,SAC3BqF,EAAWG,GAEXD,EAAUpF,GAASP,EACnB8E,EAAaa,GAsDjB,SAAmBpF,EAAOP,GACxB,GACE2D,EAAUkC,OAAM,SAACnG,EAAMoG,GACrB,OAAIA,IAAcvF,EAAcP,IAAUQ,EAAYsF,GAC1CpG,IAASc,EAAYsF,MAGnC,OAAO,EAET,OAAO,EA7DDC,CAAUxF,EAAOP,IACnBkF,GAAO,IAYb,SAASc,EAAczF,EAAOP,GACxBA,IAAUQ,EAAYD,GAjDxB,sCAkDA0F,CAAqB1F,EAAOP,GAlD5B,sCAqDAkG,CAAmB3F,EAAOP,GArD1B,8CAyDJ,WAAoCO,EAAOP,GAA3C,UAAA3B,EAAA,6DACEtN,IACAD,IACAqU,EAAc,SACdO,EAAUnF,EAAOP,GAJnB,SAKQnJ,YAAW,kBAAMsP,MAAuB,KALhD,4CAzDI,sBAkEJ,SAASA,EAAoB5F,EAAOP,GAClCmF,EAAc,MACdO,EAAUnF,EAAOP,GACjBgF,GAAiB,GArEf,8CAwEJ,WAAkCzE,EAAOP,GAAzC,UAAA3B,EAAA,6DACE8G,EAAc,OACdO,EAAUnF,EAAOP,GAFnB,SAGQnJ,YAAW,kBAAMuP,MAAoB,KAH7C,4CAxEI,sBA+EJ,SAASA,IACPjB,EAAc,OAoBQ,IAAlBvB,GAAmD,MAA5BD,EAAUC,IACnC8B,EAAU9B,EAAc,KAnB1BoB,GAAiB,GACjBxU,IACAM,IA2BF,OAAIwG,EAEA,qCACE,cAACpD,EAAA,EAAD,CAAO3B,UAAWH,EAAQiT,WAA1B,SACE,cAAC,GAAD,CAAa5N,QAAS,SAACuM,GAAD,OA1E9B,SAAqBA,GACI,MAAnBU,GACFsB,EAAchC,EAAcU,GAE9BM,EAAgBhB,GAsE8BqC,CAAYrC,QAEtD,cAAC,GAAD,CACE1M,OAAQA,EACRkN,cAAe,SAACF,GAAD,OAdvB,SAAuBA,IACC,IAAlBV,GACFoC,EAAcpC,EAAcU,GAYGE,CAAcF,SAO/C,cAACpQ,EAAA,EAAD,CAAO3B,UAAWH,EAAQgT,aAAcnS,UAAW,EAAnD,SACE,cAAC,GAAD,CACE6P,cA3HN,SAAwB5C,GAAgB,IAAD,EACYD,GAC/C/Q,EACAgR,GAHmC,mBAChCC,EADgC,KACZE,EADY,KAMrC4E,EAAa9E,GACb2E,EAAa3E,GACboF,EAAelF,GACfwE,EAAkB,KAClBE,IACAC,GAAiB,GACjBS,EAAW,IACXxU,IACAiU,GAAO,IA8GHrC,yBAA0BA,SC/L5BnR,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCa,KAAM,CACJ0C,QAAS,OACTxB,QAAS,OACT0C,eAAgB,SAChB5E,WAAY,wBAEd6U,YAAa,CACXnR,QAAS,OACTkB,eAAgB,SAChB7C,MAAO,QACP/B,WAAY,4BA0CV8E,GAAqB,CACzBpG,iBAGaqG,gBATS,SAACpG,GAAD,MAAY,CAClClB,WAAYkB,EAAMqG,SAASvH,WAC3BE,QAASgB,EAAMqG,SAASrH,WAOcmH,GAAzBC,EA1CF,SAAC,GAAiD,IAA/CtH,EAA8C,EAA9CA,WAAYqX,EAAkC,EAAlCA,mBACpBnU,GADsD,EAAdhD,QAC9BsC,MAD4C,EAEhCqR,oBAAS,GAFuB,mBAErDzL,EAFqD,KAE7CkP,EAF6C,OAG1BzD,oBAAS,GAHiB,mBAGrDlP,EAHqD,KAG1C4S,EAH0C,KAKtD5D,EAA2B,WAC3BhP,GACF4S,GAAc5S,GACdgD,YAAW,kBAAM2P,GAAWlP,KAAS,OAErCkP,GAAWlP,GACXT,YAAW,kBAAM4P,GAAc5S,KAAY,OAI/C,OACE,qCACE,cAAC,EAAD,CAAQ0S,mBAAoBA,EAAoBrX,WAAYA,IAC5D,cAACwX,EAAA,EAAD,CAAQC,QAASrP,EAAQ+K,SAAUQ,IACnC,sBAAKtQ,UAAWH,EAAQK,KAAxB,UACE,sBAAKF,UAAWH,EAAQkU,YAAxB,UACE,cAAC,EAAD,CAAWzS,UAAWA,IACtB,cAAC+S,GAAD,CAAetP,OAAQA,OAEzB,cAACuP,GAAD,CACEvP,OAAQA,EACRuL,yBAA0BA,aCxC9BiE,GAAcC,YAAgB,CAClCtQ,SAAUuQ,EACVrQ,KAAMsQ,KAGFC,GAAQC,YAAe,CAC3BC,QAASN,KAaIO,OAVf,WACE,OACE,cAAChV,EAAA,EAAD,CAAeT,MAAOA,GAAtB,SACE,cAAC,IAAD,CAAUsV,MAAOA,GAAjB,SACE,cAAC,GAAD,SCdYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1a8fb4c1.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { format } from \"date-fns\";\n\nexport const DIFFICULTY = {\n  e: \"EASY\",\n  m: \"MED\",\n  h: \"HARD\",\n};\n\nexport const TIMERLENGTH = {\n  short: 20,\n  medium: 30,\n  long: 45,\n};\n\nexport const initialState = {\n  difficulty: DIFFICULTY.e,\n  timerLength: TIMERLENGTH.short,\n  players: [\n    {\n      id: 0,\n      name: \"\",\n      score: 0,\n      current: true,\n      time: 0,\n    },\n    {\n      id: 1,\n      name: \"\",\n      score: 0,\n      current: false,\n      time: 0,\n    },\n  ],\n  timerSetting: 20,\n  currentTime: format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss\"),\n  timeTurnStarted: format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss\"),\n  isPaused: false,\n};\n\nconst settingsSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  reducers: {\n    setDifficulty: (state, action) => {\n      state.difficulty = action.payload;\n      return state;\n    },\n    setTimerLength: (state, action) => {\n      state.timerLength = action.payload;\n      return state;\n    },\n    nextPlayer: (state) => {\n      const currentPlayer = state.players.find(\n        (player) => player.current === true\n      );\n      // make current player not current\n      state.players.find((player) => player === currentPlayer).current = false;\n\n      if (currentPlayer.id !== state.players.length - 1) {\n        // if not last player, make next player current\n        state.players.find(\n          (player) => player.id === currentPlayer.id + 1\n        ).current = true;\n      } else {\n        // if last player, make first player current\n        state.players.find((player) => player.id === 0).current = true;\n      }\n      return state;\n    },\n    setCurrentTime: (state) => {\n      state.currentTime = format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss\");\n      return state;\n    },\n    setTimeTurnStarted: (state) => {\n      state.timeTurnStarted = format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss\");\n      return state;\n    },\n    addPoint: (state) => {\n      state.players.find((player) => player.current === true).score += 1;\n      return state;\n    },\n    minusPoint: (state) => {\n      state.players.find((player) => player.current === true).score -= 1;\n      return state;\n    },\n    resetScore: (state) => {\n      state.players.forEach((player) => (player.score = 0));\n      return state;\n    },\n    updatePlayersList: (state, action) => {\n      state.players = action.payload;\n      return state;\n    },\n    setIsPaused: (state, action) => {\n      state.isPaused = action.payload;\n      return state;\n    },\n  },\n});\n\nexport const {\n  setDifficulty,\n  setTimerLength,\n  nextPlayer,\n  setCurrentTime,\n  setTimeTurnStarted,\n  addPoint,\n  minusPoint,\n  resetScore,\n  updatePlayersList,\n  setIsPaused,\n} = settingsSlice.actions;\n\nexport default settingsSlice.reducer;\n","import React from \"react\";\nimport {\n  makeStyles,\n  createMuiTheme,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst titleTheme = createMuiTheme({\n  typography: {\n    fontFamily: '\"Viga\", sans-serif',\n  },\n});\n\nconst useStyles = makeStyles((theme) => {\n  console.log(\"theme\", theme);\n  return {\n    title: {\n      flexGrow: 1,\n      fontSize: 40,\n    },\n  };\n});\n\nconst TitleTypography = ({ children }) => {\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={titleTheme}>\n      <Typography className={classes.title} color=\"primary\">\n        {children}\n      </Typography>\n    </ThemeProvider>\n  );\n};\n\nexport default TitleTypography;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\n\nimport TitleTypography from \"./TitleTypography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: \"white\",\n    alignItems: \"center\",\n  },\n  header: {\n    minHeight: \"100px\",\n  },\n}));\n\nconst Header = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"transparent\" elevation={0}>\n        <Toolbar className={classes.header}>\n          <TitleTypography>SUDOKU VERSUS</TitleTypography>\n          <Button\n            size=\"large\"\n            variant=\"contained\"\n            color=\"primary\"\n            disableElevation\n          >\n            Rules\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Fade from \"@material-ui/core/Fade\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  rulesContainer: {\n    width: \"450px\",\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    margin: 10,\n    padding: 30,\n  },\n}));\n\nconst RulesTile = ({ showRules }) => {\n  const classes = useStyles();\n  return (\n    <Fade in={showRules} mountOnEnter unmountOnExit>\n      <Paper className={classes.rulesContainer} elevation={1}>\n        <Typography variant=\"h4\" color=\"primary\" paragraph>\n          Rules\n        </Typography>\n        <Typography variant=\"body1\" color=\"secondary\" paragraph>\n          Sudoku Versus is an exciting and competitive twist to sudoku! Players\n          take timed-turns filling out the puzzle and earn points for correct\n          answers while points are deducted for letting the timer run out.\n        </Typography>\n        <Typography variant=\"body1\" color=\"secondary\" paragraph>\n          Highest number of points wins and the lowest time spent overall is the\n          tie-breaker.\n        </Typography>\n        <Typography variant=\"h5\" color=\"primary\" paragraph>\n          Points Structure\n        </Typography>\n        <Typography variant=\"h6\">Correct Answer</Typography>\n        <Typography variant=\"body1\" color=\"secondary\" paragraph>\n          +1 Point &nbsp;&nbsp;|&nbsp;&nbsp; Extra Turn\n          &nbsp;&nbsp;|&nbsp;&nbsp; Timer Resets\n        </Typography>\n        <Typography variant=\"h6\">Incorrect Answer</Typography>\n        <Typography variant=\"body1\" color=\"secondary\" paragraph>\n          +0 Points &nbsp;&nbsp;|&nbsp;&nbsp; Turn Ends\n        </Typography>\n        <Typography variant=\"h6\">Timer Runs Out</Typography>\n        <Typography variant=\"body1\" color=\"secondary\" paragraph>\n          -1 Point &nbsp;&nbsp;|&nbsp;&nbsp; Turn Ends\n        </Typography>\n      </Paper>\n    </Fade>\n  );\n};\n\nexport default RulesTile;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const Colors = {\n  primary: \"#3f51b5\",\n  selectedBackgroundColor: \"#e8ecfa\",\n  muted: grey[700],\n};\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: grey[700],\n    },\n    mainBackgroundColor: grey[200],\n    selectBackgroundColor: \"#F0F2FF\",\n  },\n  typography: {\n    fontFamily: [\"Karla\", \"san-serif\"].join(\",\"),\n  },\n});\n\ntheme.typography.h1.fontWeight = 700;\ntheme.typography.h5.fontWeight = 700;\ntheme.typography.h6.fontWeight = 700;\ntheme.typography.body1.fontSize = \"18px\";\n\nexport default theme;\n","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { Colors } from \"../themes/defaultTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  playerListContainer: {\n    flexGrow: 1,\n    padding: 10,\n  },\n  playerList: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    borderRadius: \"20px\",\n    height: \"100%\",\n  },\n  playerHeaderRow: {\n    height: 60,\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 20px\",\n  },\n  playerRow: {\n    flexGrow: 1,\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 20px 0 30px\",\n  },\n  playerRowSelected: {\n    flexGrow: 1,\n    borderLeft: `10px solid ${Colors.primary}`,\n    backgroundColor: Colors.selectedBackgroundColor,\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 20px\",\n    fontWeight: 700,\n    \"&:last-child\": {\n      borderRadius: \"0 0 20px 20px\",\n    },\n  },\n  playerRowTitle: {\n    width: \"50%\",\n    fontSize: 24,\n  },\n  playerRowStats: {\n    width: \"50%\",\n    display: \"flex\",\n  },\n  playerRowStatElement: {\n    width: \"50%\",\n    textAlign: \"center\",\n    fontSize: 24,\n  },\n}));\n\nconst PlayerRow = ({ player }) => {\n  const classes = useStyles();\n  const selectedStyles = player.current\n    ? classes.playerRowSelected\n    : classes.playerRow;\n  return (\n    <div className={selectedStyles}>\n      <div className={classes.playerRowTitle}>{player.name}</div>\n      <div className={classes.playerRowStats}>\n        <div className={classes.playerRowStatElement}>{player.score}</div>\n        <div className={classes.playerRowStatElement}>{player.time}</div>\n      </div>\n    </div>\n  );\n};\n\nconst PlayersList = ({ players }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.playerListContainer}>\n      <Paper className={classes.playerList} elevation={1}>\n        <div className={classes.playerHeaderRow}>\n          <div className={classes.playerRowTitle}></div>\n          <div className={classes.playerRowStats}>\n            <div className={classes.playerRowStatElement}>Score</div>\n            <div className={classes.playerRowStatElement}>Time</div>\n          </div>\n        </div>\n        {players.map((player, i) => (\n          <PlayerRow key={i} player={player} />\n        ))}\n      </Paper>\n    </div>\n  );\n};\n\nexport default PlayersList;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { differenceInSeconds } from \"date-fns\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport {\n  minusPoint,\n  nextPlayer,\n  setCurrentTime,\n  setTimeTurnStarted,\n} from \"../features/settingsSlice\";\n\nconst useStyles = makeStyles((theme) => ({\n  timerContainer: {\n    width: \"300px\",\n    padding: \"10px\",\n  },\n  timer: {\n    display: \"flex\",\n    height: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: \"20px\",\n    backgroundColor: theme.palette.primary.main,\n    color: \"white\",\n  },\n}));\n\n/**\n * React component for the Timer in Status Section.\n * Uses the 'useEffect' hook to update the timer every second.\n */\nconst Timer = ({\n  nextPlayer,\n  timerSetting,\n  timeTurnStarted,\n  currentTime,\n  setCurrentTime,\n  setTimeTurnStarted,\n  won,\n  minusPoint,\n}) => {\n  const classes = useStyles();\n\n  useEffect(() => {\n    function tick() {\n      setCurrentTime();\n    }\n    if (!won) setTimeout(() => tick(), 1000);\n  }, [currentTime, setCurrentTime, won]);\n\n  const secondsTotal = differenceInSeconds(\n    new Date(currentTime),\n    new Date(timeTurnStarted)\n  );\n  const timeRemaining = timerSetting - secondsTotal;\n\n  useEffect(() => {\n    const endTurnNoAnswer = () => {\n      minusPoint();\n      nextPlayer();\n      setTimeTurnStarted();\n    };\n\n    if (timeRemaining < 0) {\n      endTurnNoAnswer();\n    }\n  }, [setTimeTurnStarted, nextPlayer, timeRemaining, minusPoint]);\n\n  return (\n    <>\n      <div className={classes.timerContainer}>\n        <Paper className={classes.timer} elevation={1}>\n          <Typography variant=\"h1\">{timeRemaining}</Typography>\n        </Paper>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  players: state.settings.players,\n  timerSetting: state.settings.timerSetting,\n  currentTime: state.settings.currentTime,\n  timeTurnStarted: state.settings.timeTurnStarted,\n  won: state.game.won,\n});\n\nconst mapDispatchToProps = {\n  nextPlayer,\n  setCurrentTime,\n  setTimeTurnStarted,\n  minusPoint,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Paper from \"@material-ui/core/Paper\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\n\nimport { setIsPaused } from \"../features/settingsSlice\";\nimport { Colors } from \"../themes/defaultTheme\";\nimport PlayersList from \"./PlayersList\";\nimport Timer from \"./Timer\";\n\nconst useStyles = makeStyles((theme) => ({\n  leftContainer: {\n    display: \"flex\",\n    width: \"100%\",\n    flexDirection: \"column\",\n  },\n  timerPauseContainer: {\n    display: \"flex\",\n    height: \"175px\",\n  },\n\n  playPauseContainer: {\n    padding: 10,\n  },\n  playPause: {\n    cursor: \"pointer\",\n    display: \"flex\",\n    height: \"100%\",\n    width: \"150px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: \"20px\",\n    fontSize: \"76px\",\n    color: theme.palette.primary.main,\n\n    \"&:hover\": {\n      backgroundColor: Colors.selectedBackgroundColor,\n      border: `5px solid ${Colors.primary}`,\n    },\n  },\n}));\n\nconst GameInfoContainer = ({ inGame, players, isPaused, setIsPaused }) => {\n  const classes = useStyles();\n\n  const playPause = isPaused ? (\n    <PlayArrowIcon fontSize=\"inherit\" />\n  ) : (\n    <PauseIcon fontSize=\"inherit\" />\n  );\n  return (\n    <Slide direction=\"right\" in={inGame} mountOnEnter unmountOnExit>\n      <div className={classes.leftContainer}>\n        <div className={classes.timerPauseContainer}>\n          <Timer />\n          <div className={classes.playPauseContainer}>\n            <Paper\n              className={classes.playPause}\n              elevation={1}\n              onClick={() => setIsPaused(!isPaused)}\n            >\n              {playPause}\n            </Paper>\n          </div>\n        </div>\n        <PlayersList players={players} />\n      </div>\n    </Slide>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  players: state.settings.players,\n  isPaused: state.settings.isPaused,\n});\n\nconst mapDispatchToProps = {\n  setIsPaused,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameInfoContainer);\n","/*\n    Sudoku.js\n    ---------\n\n    A Sudoku puzzle generator and solver JavaScript library.\n\n    Please see the README for more details.\n*/\n\n//(function(root){\n    //var sudoku = root.sudoku = {};  // Global reference to the sudoku library\n    var sudoku = {};\n    sudoku.DIGITS = \"123456789\";    // Allowed sudoku.DIGITS\n    var ROWS = \"ABCDEFGHI\";         // Row lables\n    var COLS = sudoku.DIGITS;       // Column lables\n    var SQUARES = null;             // Square IDs\n\n    var UNITS = null;               // All units (row, column, or box)\n    var SQUARE_UNITS_MAP = null;    // Squares -> units map\n    var SQUARE_PEERS_MAP = null;    // Squares -> peers map\n\n    var MIN_GIVENS = 17;            // Minimum number of givens\n    var NR_SQUARES = 81;            // Number of squares\n\n    // Define difficulties by how many squares are given to the player in a new\n    // puzzle.\n    var DIFFICULTY = {\n        \"easy\":         62,\n        \"medium\":       53,\n        \"hard\":         44,\n        \"very-hard\":    35,\n        \"insane\":       26,\n        \"inhuman\":      17,\n    };\n\n    // Blank character and board representation\n    sudoku.BLANK_CHAR = '.';\n    sudoku.BLANK_BOARD = \"....................................................\"+\n            \".............................\";\n\n    // Init\n    // -------------------------------------------------------------------------\n    function initialize(){\n        /* Initialize the Sudoku library (invoked after library load)\n        */\n        SQUARES             = sudoku._cross(ROWS, COLS);\n        UNITS               = sudoku._get_all_units(ROWS, COLS);\n        SQUARE_UNITS_MAP    = sudoku._get_square_units_map(SQUARES, UNITS);\n        SQUARE_PEERS_MAP    = sudoku._get_square_peers_map(SQUARES,\n                                    SQUARE_UNITS_MAP);\n    }\n\n    // Generate\n    // -------------------------------------------------------------------------\n    sudoku.generate = function(difficulty, unique){\n        /* Generate a new Sudoku puzzle of a particular `difficulty`, e.g.,\n\n            // Generate an \"easy\" sudoku puzzle\n            sudoku.generate(\"easy\");\n\n\n        Difficulties are as follows, and represent the number of given squares:\n\n                \"easy\":         61\n                \"medium\":       52\n                \"hard\":         43\n                \"very-hard\":    34\n                \"insane\":       25\n                \"inhuman\":      17\n\n\n        You may also enter a custom number of squares to be given, e.g.,\n\n            // Generate a new Sudoku puzzle with 60 given squares\n            sudoku.generate(60)\n\n\n        `difficulty` must be a number between 17 and 81 inclusive. If it's\n        outside of that range, `difficulty` will be set to the closest bound,\n        e.g., 0 -> 17, and 100 -> 81.\n\n\n        By default, the puzzles are unique, uless you set `unique` to false.\n        (Note: Puzzle uniqueness is not yet implemented, so puzzles are *not*\n        guaranteed to have unique solutions)\n\n        TODO: Implement puzzle uniqueness\n        */\n\n        // If `difficulty` is a string or undefined, convert it to a number or\n        // default it to \"easy\" if undefined.\n        if(typeof difficulty === \"string\" || typeof difficulty === \"undefined\"){\n            difficulty = DIFFICULTY[difficulty] || DIFFICULTY.easy;\n        }\n\n        // Force difficulty between 17 and 81 inclusive\n        difficulty = sudoku._force_range(difficulty, NR_SQUARES + 1,\n                MIN_GIVENS);\n\n        // Default unique to true\n        unique = unique || true;\n\n        // Get a set of squares and all possible candidates for each square\n        var blank_board = \"\";\n        for(var i = 0; i < NR_SQUARES; ++i){\n            blank_board += '.';\n        }\n        var candidates = sudoku._get_candidates_map(blank_board);\n\n        // For each item in a shuffled list of squares\n        var shuffled_squares = sudoku._shuffle(SQUARES);\n        for(var si in shuffled_squares){\n            var square = shuffled_squares[si];\n\n            // If an assignment of a random chioce causes a contradictoin, give\n            // up and try again\n            var rand_candidate_idx =\n                    sudoku._rand_range(candidates[square].length);\n            var rand_candidate = candidates[square][rand_candidate_idx];\n            if(!sudoku._assign(candidates, square, rand_candidate)){\n                break;\n            }\n\n            // Make a list of all single candidates\n            var single_candidates = [];\n            for(si in SQUARES){\n                square = SQUARES[si];\n\n                if(candidates[square].length === 1){\n                    single_candidates.push(candidates[square]);\n                }\n            }\n\n            // If we have at least difficulty, and the unique candidate count is\n            // at least 8, return the puzzle!\n            if(single_candidates.length >= difficulty &&\n                    sudoku._strip_dups(single_candidates).length >= 8){\n                var board = \"\";\n                var givens_idxs = [];\n                for(i in SQUARES){\n                    square = SQUARES[i];\n                    if(candidates[square].length === 1){\n                        board += candidates[square];\n                        givens_idxs.push(i);\n                    } else {\n                        board += sudoku.BLANK_CHAR;\n                    }\n                }\n\n                // If we have more than `difficulty` givens, remove some random\n                // givens until we're down to exactly `difficulty`\n                var nr_givens = givens_idxs.length;\n                if(nr_givens > difficulty){\n                    givens_idxs = sudoku._shuffle(givens_idxs);\n                    for(i = 0; i < nr_givens - difficulty; ++i){\n                        var target = parseInt(givens_idxs[i]);\n                        board = board.substr(0, target) + sudoku.BLANK_CHAR +\n                            board.substr(target + 1);\n                    }\n                }\n\n                // Double check board is solvable\n                // TODO: Make a standalone board checker. Solve is expensive.\n                if(sudoku.solve(board)){\n                    return board;\n                }\n            }\n        }\n\n        // Give up and try a new puzzle\n        return sudoku.generate(difficulty);\n    };\n\n    // Solve\n    // -------------------------------------------------------------------------\n    sudoku.solve = function(board, reverse){\n        /* Solve a sudoku puzzle given a sudoku `board`, i.e., an 81-character\n        string of sudoku.DIGITS, 1-9, and spaces identified by '.', representing the\n        squares. There must be a minimum of 17 givens. If the given board has no\n        solutions, return false.\n\n        Optionally set `reverse` to solve \"backwards\", i.e., rotate through the\n        possibilities in reverse. Useful for checking if there is more than one\n        solution.\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        // Check number of givens is at least MIN_GIVENS\n        var nr_givens = 0;\n        for(var i in board){\n            if(board[i] !== sudoku.BLANK_CHAR && sudoku._in(board[i], sudoku.DIGITS)){\n                ++nr_givens;\n            }\n        }\n        if(nr_givens < MIN_GIVENS){\n            // eslint-disable-next-line\n            throw \"Too few givens. Minimum givens is \" + MIN_GIVENS;\n        }\n\n        // Default reverse to false\n        reverse = reverse || false;\n\n        var candidates = sudoku._get_candidates_map(board);\n        var result = sudoku._search(candidates, reverse);\n\n        if(result){\n            var solution = \"\";\n            for(var square in result){\n                solution += result[square];\n            }\n            return solution;\n        }\n        return false;\n    };\n\n    sudoku.get_candidates = function(board){\n        /* Return all possible candidatees for each square as a grid of\n        candidates, returnning `false` if a contradiction is encountered.\n\n        Really just a wrapper for sudoku._get_candidates_map for programmer\n        consumption.\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        // Get a candidates map\n        var candidates_map = sudoku._get_candidates_map(board);\n\n        // If there's an error, return false\n        if(!candidates_map){\n            return false;\n        }\n\n        // Transform candidates map into grid\n        var rows = [];\n        var cur_row = [];\n        var i = 0;\n        for(var square in candidates_map){\n            var candidates = candidates_map[square];\n            cur_row.push(candidates);\n            if(i % 9 === 8){\n                rows.push(cur_row);\n                cur_row = [];\n            }\n            ++i;\n        }\n        return rows;\n    }\n\n    sudoku._get_candidates_map = function(board){\n        /* Get all possible candidates for each square as a map in the form\n        {square: sudoku.DIGITS} using recursive constraint propagation. Return `false`\n        if a contradiction is encountered\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        var candidate_map = {};\n        var squares_values_map = sudoku._get_square_vals_map(board);\n\n        // Start by assigning every digit as a candidate to every square\n        for(var si in SQUARES){\n            candidate_map[SQUARES[si]] = sudoku.DIGITS;\n        }\n\n        // For each non-blank square, assign its value in the candidate map and\n        // propigate.\n        for(var square in squares_values_map){\n            var val = squares_values_map[square];\n\n            if(sudoku._in(val, sudoku.DIGITS)){\n                var new_candidates = sudoku._assign(candidate_map, square, val);\n\n                // Fail if we can't assign val to square\n                if(!new_candidates){\n                    return false;\n                }\n            }\n        }\n\n        return candidate_map;\n    };\n\n    sudoku._search = function(candidates, reverse){\n        /* Given a map of squares -> candiates, using depth-first search,\n        recursively try all possible values until a solution is found, or false\n        if no solution exists.\n        */\n\n        // Return if error in previous iteration\n        if(!candidates){\n            return false;\n        }\n\n        // Default reverse to false\n        reverse = reverse || false;\n\n        // If only one candidate for every square, we've a solved puzzle!\n        // Return the candidates map.\n        var max_nr_candidates = 0;\n        // eslint-disable-next-line\n        var max_candidates_square = null;\n        for(var si in SQUARES){\n            var square = SQUARES[si];\n\n            var nr_candidates = candidates[square].length;\n\n            if(nr_candidates > max_nr_candidates){\n                max_nr_candidates = nr_candidates;\n                // eslint-disable-next-line no-unused-vars\n                max_candidates_square = square;\n            }\n        }\n        if(max_nr_candidates === 1){\n            return candidates;\n        }\n\n        // Choose the blank square with the fewest possibilities > 1\n        var min_nr_candidates = 10;\n        var min_candidates_square = null;\n        for(si in SQUARES){\n            square = SQUARES[si];\n\n            nr_candidates = candidates[square].length;\n\n            if(nr_candidates < min_nr_candidates && nr_candidates > 1){\n                min_nr_candidates = nr_candidates;\n                min_candidates_square = square;\n            }\n        }\n\n        // Recursively search through each of the candidates of the square\n        // starting with the one with fewest candidates.\n\n        // Rotate through the candidates forwards\n        var min_candidates = candidates[min_candidates_square];\n        if(!reverse){\n            for(var vi in min_candidates){\n                var val = min_candidates[vi];\n\n                // TODO: Implement a non-rediculous deep copy function\n                var candidates_copy = JSON.parse(JSON.stringify(candidates));\n                var candidates_next = sudoku._search(\n                    sudoku._assign(candidates_copy, min_candidates_square, val)\n                );\n\n                if(candidates_next){\n                    return candidates_next;\n                }\n            }\n\n        // Rotate through the candidates backwards\n        } else {\n            for(vi = min_candidates.length - 1; vi >= 0; --vi){\n                val = min_candidates[vi];\n\n                // TODO: Implement a non-rediculous deep copy function\n                candidates_copy = JSON.parse(JSON.stringify(candidates));\n                candidates_next = sudoku._search(\n                    sudoku._assign(candidates_copy, min_candidates_square, val),\n                    reverse\n                );\n\n                if(candidates_next){\n                    return candidates_next;\n                }\n            }\n        }\n\n        // If we get through all combinations of the square with the fewest\n        // candidates without finding an answer, there isn't one. Return false.\n        return false;\n    };\n\n    sudoku._assign = function(candidates, square, val){\n        /* Eliminate all values, *except* for `val`, from `candidates` at\n        `square` (candidates[square]), and propagate. Return the candidates map\n        when finished. If a contradiciton is found, return false.\n\n        WARNING: This will modify the contents of `candidates` directly.\n        */\n\n        // Grab a list of canidates without 'val'\n        var other_vals = candidates[square].replace(val, \"\");\n\n        // Loop through all other values and eliminate them from the candidates\n        // at the current square, and propigate. If at any point we get a\n        // contradiction, return false.\n        for(var ovi in other_vals){\n            var other_val = other_vals[ovi];\n\n            var candidates_next =\n                sudoku._eliminate(candidates, square, other_val);\n\n            if(!candidates_next){\n                //console.log(\"Contradiction found by _eliminate.\");\n                return false;\n            }\n        }\n\n        return candidates;\n    };\n\n    sudoku._eliminate = function(candidates, square, val){\n        /* Eliminate `val` from `candidates` at `square`, (candidates[square]),\n        and propagate when values or places <= 2. Return updated candidates,\n        unless a contradiction is detected, in which case, return false.\n\n        WARNING: This will modify the contents of `candidates` directly.\n        */\n\n        // If `val` has already been eliminated from candidates[square], return\n        // with candidates.\n        if(!sudoku._in(val, candidates[square])){\n            return candidates;\n        }\n\n        // Remove `val` from candidates[square]\n        candidates[square] = candidates[square].replace(val, '');\n\n        // If the square has only candidate left, eliminate that value from its\n        // peers\n        var nr_candidates = candidates[square].length;\n        if(nr_candidates === 1){\n            var target_val = candidates[square];\n\n            for(var pi in SQUARE_PEERS_MAP[square]){\n                var peer = SQUARE_PEERS_MAP[square][pi];\n\n                var candidates_new =\n                        sudoku._eliminate(candidates, peer, target_val);\n\n                if(!candidates_new){\n                    return false;\n                }\n            }\n\n        // Otherwise, if the square has no candidates, we have a contradiction.\n        // Return false.\n        } if(nr_candidates === 0){\n            return false;\n        }\n\n        // If a unit is reduced to only one place for a value, then assign it\n        for(var ui in SQUARE_UNITS_MAP[square]){\n            var unit = SQUARE_UNITS_MAP[square][ui];\n\n            var val_places = [];\n            for(var si in unit){\n                var unit_square = unit[si];\n                if(sudoku._in(val, candidates[unit_square])){\n                    val_places.push(unit_square);\n                }\n            }\n\n            // If there's no place for this value, we have a contradition!\n            // return false\n            if(val_places.length === 0){\n                return false;\n\n            // Otherwise the value can only be in one place. Assign it there.\n            } else if(val_places.length === 1){\n                candidates_new =\n                    sudoku._assign(candidates, val_places[0], val);\n\n                if(!candidates_new){\n                    return false;\n                }\n            }\n        }\n\n        return candidates;\n    };\n\n\n    // Square relationships\n    // -------------------------------------------------------------------------\n    // Squares, and their relationships with values, units, and peers.\n\n    sudoku._get_square_vals_map = function(board){\n        /* Return a map of squares -> values\n        */\n        var squares_vals_map = {};\n\n        // Make sure `board` is a string of length 81\n        if(board.length !== SQUARES.length){\n            // eslint-disable-next-line\n            throw \"Board/squares length mismatch.\";\n\n        } else {\n            for(var i in SQUARES){\n                squares_vals_map[SQUARES[i]] = board[i];\n            }\n        }\n\n        return squares_vals_map;\n    };\n\n    sudoku._get_square_units_map = function(squares, units){\n        /* Return a map of `squares` and their associated units (row, col, box)\n        */\n        var square_unit_map = {};\n\n        // For every square...\n        for(var si in squares){\n            var cur_square = squares[si];\n\n            // Maintain a list of the current square's units\n            var cur_square_units = [];\n\n            // Look through the units, and see if the current square is in it,\n            // and if so, add it to the list of of the square's units.\n            for(var ui in units){\n                var cur_unit = units[ui];\n\n                if(cur_unit.indexOf(cur_square) !== -1){\n                    cur_square_units.push(cur_unit);\n                }\n            }\n\n            // Save the current square and its units to the map\n            square_unit_map[cur_square] = cur_square_units;\n        }\n\n        return square_unit_map;\n    };\n\n    sudoku._get_square_peers_map = function(squares, units_map){\n        /* Return a map of `squares` and their associated peers, i.e., a set of\n        other squares in the square's unit.\n        */\n        var square_peers_map = {};\n\n        // For every square...\n        for(var si in squares){\n            var cur_square = squares[si];\n            var cur_square_units = units_map[cur_square];\n\n            // Maintain list of the current square's peers\n            var cur_square_peers = [];\n\n            // Look through the current square's units map...\n            for(var sui in cur_square_units){\n                var cur_unit = cur_square_units[sui];\n\n                for(var ui in cur_unit){\n                    var cur_unit_square = cur_unit[ui];\n\n                    if(cur_square_peers.indexOf(cur_unit_square) === -1 &&\n                            cur_unit_square !== cur_square){\n                        cur_square_peers.push(cur_unit_square);\n                    }\n                }\n            }\n\n            // Save the current square an its associated peers to the map\n            square_peers_map[cur_square] = cur_square_peers;\n        }\n\n        return square_peers_map;\n    };\n\n    sudoku._get_all_units = function(rows, cols){\n        /* Return a list of all units (rows, cols, boxes)\n        */\n        var units = [];\n\n        // Rows\n        for(var ri in rows){\n            units.push(sudoku._cross(rows[ri], cols));\n        }\n\n        // Columns\n        for(var ci in cols){\n           units.push(sudoku._cross(rows, cols[ci]));\n        }\n\n        // Boxes\n        var row_squares = [\"ABC\", \"DEF\", \"GHI\"];\n        var col_squares = [\"123\", \"456\", \"789\"];\n        for(var rsi in row_squares){\n            for(var csi in col_squares){\n                units.push(sudoku._cross(row_squares[rsi], col_squares[csi]));\n            }\n        }\n\n        return units;\n    };\n\n\n    // Conversions\n    // -------------------------------------------------------------------------\n    sudoku.board_string_to_grid = function(board_string){\n        /* Convert a board string to a two-dimensional array\n        */\n        var rows = [];\n        var cur_row = [];\n        for(var i in board_string){\n            cur_row.push(board_string[i]);\n            if(i % 9 === 8){\n                rows.push(cur_row);\n                cur_row = [];\n            }\n        }\n        return rows;\n    };\n\n    sudoku.board_grid_to_string = function(board_grid){\n        /* Convert a board grid to a string\n        */\n        var board_string = \"\";\n        for(var r = 0; r < 9; ++r){\n            for(var c = 0; c < 9; ++c){\n                board_string += board_grid[r][c];\n            }\n        }\n        return board_string;\n    };\n\n\n    // Utility\n    // -------------------------------------------------------------------------\n\n    sudoku.print_board = function(board){\n        /* Print a sudoku `board` to the console.\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        var V_PADDING = \" \";  // Insert after each square\n        var H_PADDING = '\\n'; // Insert after each row\n\n        var V_BOX_PADDING = \"  \"; // Box vertical padding\n        var H_BOX_PADDING = '\\n'; // Box horizontal padding\n\n        var display_string = \"\";\n\n        for(var i in board){\n            var square = board[i];\n\n            // Add the square and some padding\n            display_string += square + V_PADDING;\n\n            // Vertical edge of a box, insert v. box padding\n            if(i % 3 === 2){\n                display_string += V_BOX_PADDING;\n            }\n\n            // End of a line, insert horiz. padding\n            if(i % 9 === 8){\n                display_string += H_PADDING;\n            }\n\n            // Horizontal edge of a box, insert h. box padding\n            if(i % 27 === 26){\n                display_string += H_BOX_PADDING;\n            }\n        }\n\n        console.log(display_string);\n    };\n\n    sudoku.validate_board = function(board){\n        /* Return if the given `board` is valid or not. If it's valid, return\n        true. If it's not, return a string of the reason why it's not.\n        */\n\n        // Check for empty board\n        if(!board){\n            return \"Empty board\";\n        }\n\n        // Invalid board length\n        if(board.length !== NR_SQUARES){\n            return \"Invalid board size. Board must be exactly \" + NR_SQUARES +\n                    \" squares.\";\n        }\n\n        // Check for invalid characters\n        for(var i in board){\n            if(!sudoku._in(board[i], sudoku.DIGITS) && board[i] !== sudoku.BLANK_CHAR){\n                return \"Invalid board character encountered at index \" + i +\n                        \": \" + board[i];\n            }\n        }\n\n        // Otherwise, we're good. Return true.\n        return true;\n    };\n\n    sudoku._cross = function(a, b){\n        /* Cross product of all elements in `a` and `b`, e.g.,\n        sudoku._cross(\"abc\", \"123\") ->\n        [\"a1\", \"a2\", \"a3\", \"b1\", \"b2\", \"b3\", \"c1\", \"c2\", \"c3\"]\n        */\n        var result = [];\n        for(var ai in a){\n            for(var bi in b){\n                result.push(a[ai] + b[bi]);\n            }\n        }\n        return result;\n    };\n\n    sudoku._in = function(v, seq){\n        /* Return if a value `v` is in sequence `seq`.\n        */\n        return seq.indexOf(v) !== -1;\n    };\n\n    sudoku._first_true = function(seq){\n        /* Return the first element in `seq` that is true. If no element is\n        true, return false.\n        */\n        for(var i in seq){\n            if(seq[i]){\n                return seq[i];\n            }\n        }\n        return false;\n    };\n\n    sudoku._shuffle = function(seq){\n        /* Return a shuffled version of `seq`\n        */\n\n        // Create an array of the same size as `seq` filled with false\n        var shuffled = [];\n        for(var i = 0; i < seq.length; ++i){\n            shuffled.push(false);\n        }\n\n        for(i in seq){\n            var ti = sudoku._rand_range(seq.length);\n\n            while(shuffled[ti]){\n                ti = (ti + 1) > (seq.length - 1) ? 0 : (ti + 1);\n            }\n\n            shuffled[ti] = seq[i];\n        }\n\n        return shuffled;\n    };\n\n    sudoku._rand_range = function(max, min){\n        /* Get a random integer in the range of `min` to `max` (non inclusive).\n        If `min` not defined, default to 0. If `max` not defined, throw an\n        error.\n        */\n        min = min || 0;\n        if(max){\n            return Math.floor(Math.random() * (max - min)) + min;\n        } else {\n            // eslint-disable-next-line\n            throw \"Range undefined\";\n        }\n    };\n\n    sudoku._strip_dups = function(seq){\n        /* Strip duplicate values from `seq`\n        */\n        var seq_set = [];\n        var dup_map = {};\n        for(var i in seq){\n            var e = seq[i];\n            if(!dup_map[e]){\n                seq_set.push(e);\n                dup_map[e] = true;\n            }\n        }\n        return seq_set;\n    };\n\n    sudoku._force_range = function(nr, max, min){\n        /* Force `nr` to be within the range from `min` to, but not including,\n        `max`. `min` is optional, and will default to 0. If `nr` is undefined,\n        treat it as zero.\n        */\n        min = min || 0\n        nr = nr || 0\n        if(nr < min){\n            return min;\n        }\n        if(nr > max){\n            return max;\n        }\n        return nr\n    }\n\n    // Initialize library after load\n    initialize();\n\n    export const getSudoku = () => {\n      return sudoku;\n    }\n\n// Pass whatever the root object is, like 'window' in browsers\n//})(this);\n","/**\n *  This file gets the solved sudoku from 'sudoku.js' and\n * generates a unique sudoku position from it.\n *\n *  Initially, I tried the sudokus generated by 'sudoku.js'. But\n * it didnt handle the difficulty properly. An 'Easy' sudoku is\n * not that easy, and can be quite hard sometimes! And, filling\n * is uneven. Sometimes, entire rows/columns/boxes are filled!\n *\n *  The 'sudoku.js' code is untouched, except for the minimal\n * changes required to import it here.\n *\n *  The 'sudoku.js' javascript library by robatron is at\n * https://github.com/robatron/sudoku.js . All credits to\n * robatron for taking the hustle out of creating valid sudokus!\n *\n *  My code in this module builds on his code! This wouldn't\n * be possible without people like him sharing in the\n * open source community!\n */\nimport { getSudoku } from \"./sudoku\";\n\n/**\n * The Sudoku position is 9x9.\n *    A1 A2 A3 A4 A5 A6 A7 A8 A9\n *    B1 B2 B3 B4 B5 B6 B7 B8 B9\n *    C1 C2 C3 C4 C5 C6 C7 C8 C9\n *    D1 D2 D3 D4 D5 D6 D7 D8 D9\n *    E1 E2 E3 E4 E5 E6 E7 E8 E9\n *    F1 F2 F3 F4 F5 F6 F7 F8 F9\n *    G1 G2 G3 G4 G5 G6 G7 G8 G9\n *    H1 H2 H3 H4 H5 H6 H7 H8 H9\n *    I1 I2 I3 I4 I5 I6 I7 I8 I9\n *\n * It can be considered to be comprised of 9 boxes\n * each, stacked in a 3x3 formation.\n * Like this: Box1 Box2 Box3\n *            Box4 Box5 Box6\n *            Box7 Box8 Box9\n *\n * In turn, each box is comprised of 9 cells stacked\n * in a 3x3 formation as above. This gives us the below\n * representation:\n *      Box1        Box2        Box3\n *    A1 A2 A3    A4 A5 A6    A7 A8 A9\n *    B1 B2 B3    B4 B5 B6    B7 B8 B9\n *    C1 C2 C3    C4 C5 C6    C7 C8 C9\n *      Box4        Box5        Box6\n *    D1 D2 D3    D4 D5 D6    D7 D8 D9\n *    E1 E2 E3    E4 E5 E6    E7 E8 E9\n *    F1 F2 F3    F4 F5 F6    F7 F8 F9\n *      Box7        Box8        Box9\n *    G1 G2 G3    G4 G5 G6    G7 G8 G9\n *    H1 H2 H3    H4 H5 H6    H7 H8 H9\n *    I1 I2 I3    I4 I5 I6    I7 I8 I9\n *\n * For example, Box1 has the following cells:\n * Box1: A1 A2 A3\n *       B1 B2 B3\n *       C1 C2 C3\n *\n * So in Box1,\n *    Cell1: A1   Cell2: A2   Cell3: A3\n *    Cell4: B1   Cell5: B2   Cell6: B3\n *    Cell7: C1   Cell8: C2   Cell9: C3\n *\n * and in Box8,\n *    Cell1: G4   Cell2: G5   Cell3: G6\n *    Cell4: H4   Cell5: H5   Cell6: H6\n *    Cell7: I4   Cell8: I5   Cell9: I6\n *\n * and so on...\n */\n\n/**\n * Initializes a null array for easier resets in the code.\n */\nlet nullArray = [\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n  \"0\",\n];\n\n/**\n * Gets the coordinates of the center cell of the specified box.\n */\nfunction _getBoxCenter(box) {\n  // eslint-disable-next-line\n  switch (box) {\n    case 0:\n      return [1, 1];\n    case 1:\n      return [1, 4];\n    case 2:\n      return [1, 7];\n    case 3:\n      return [4, 1];\n    case 4:\n      return [4, 4];\n    case 5:\n      return [4, 7];\n    case 6:\n      return [7, 1];\n    case 7:\n      return [7, 4];\n    case 8:\n      return [7, 7];\n  }\n}\n\n/**\n * Gets the index of cell given:\n * 1. Box\n * 2. Cell\n */\nfunction _getIndexOfCell(box, cell) {\n  let [row, column] = _getBoxCenter(box);\n  // eslint-disable-next-line\n  switch (cell) {\n    case 0: {\n      row--;\n      column--;\n      break;\n    }\n    case 1: {\n      row--;\n      break;\n    }\n    case 2: {\n      row--;\n      column++;\n      break;\n    }\n    case 3: {\n      column--;\n      break;\n    }\n    case 4: {\n      break;\n    }\n    case 5: {\n      column++;\n      break;\n    }\n    case 6: {\n      row++;\n      column--;\n      break;\n    }\n    case 7: {\n      row++;\n      break;\n    }\n    case 8: {\n      row++;\n      column++;\n      break;\n    }\n  }\n  return row * 9 + column;\n}\n\n/**\n * Checks if Cell is available or not (i.e., filled).\n */\nfunction _cellAvailable(tempInitArray, box, value) {\n  return tempInitArray[_getIndexOfCell(box, value)] === \"0\" ? 0 : 1;\n}\n\n/**\n * Generates a Unique Sudoku puzzle from a solved Sudoku.\n */\nfunction _generateUniqueSudoku(solvedArray, difficulty, newDifficulty) {\n  let currentDifficulty = difficulty;\n  let minimumCells, maximumCells, totalCells, box, cell;\n\n  let tempInitArray = nullArray.slice();\n  let boxCounts = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  let boxesAvailable = [];\n  let cellsAvailable = [];\n\n  if (newDifficulty) currentDifficulty = newDifficulty;\n\n  if (currentDifficulty === \"EASY\") {\n    minimumCells = 3;\n    maximumCells = 7;\n    totalCells = 45;\n  } else if (currentDifficulty === \"MEDIUM\") {\n    minimumCells = 2;\n    maximumCells = 6;\n    totalCells = 40;\n  } else {\n    minimumCells = 1;\n    maximumCells = 5;\n    totalCells = 30;\n  }\n\n  for (let j = 0; j < 9; j++) {\n    boxCounts[j] =\n      _cellAvailable(tempInitArray, j, 0) +\n      _cellAvailable(tempInitArray, j, 1) +\n      _cellAvailable(tempInitArray, j, 2) +\n      _cellAvailable(tempInitArray, j, 3) +\n      _cellAvailable(tempInitArray, j, 4) +\n      _cellAvailable(tempInitArray, j, 5) +\n      _cellAvailable(tempInitArray, j, 6) +\n      _cellAvailable(tempInitArray, j, 7) +\n      _cellAvailable(tempInitArray, j, 8);\n  }\n\n  for (let i = 0; i < totalCells; i++) {\n    boxesAvailable = [];\n    for (let j = 0; j < 9; j++) {\n      if (boxCounts[j] < minimumCells) {\n        boxesAvailable.push(j);\n      }\n    }\n    if (boxesAvailable) {\n      for (let j = 0; j < 9; j++) {\n        if (boxCounts[j] < maximumCells) {\n          boxesAvailable.push(j);\n        }\n      }\n    }\n    box = boxesAvailable[(Math.random() * boxesAvailable.length) | 0];\n\n    cellsAvailable = [];\n    for (let j = 0; j < 9; j++) {\n      if (tempInitArray[_getIndexOfCell(box, j)] === \"0\") {\n        cellsAvailable.push(j);\n      }\n    }\n    cell = cellsAvailable[(Math.random() * cellsAvailable.length) | 0];\n\n    let index = _getIndexOfCell(box, cell);\n    tempInitArray[index] = solvedArray[index];\n    boxCounts[box]++;\n  }\n\n  return tempInitArray;\n}\n\nexport const getUniqueSudoku = (difficulty, newDifficulty) => {\n  let temporaryInitArray = nullArray.slice();\n  let temporarySolvedArray = nullArray.slice();\n  let sudoku = getSudoku();\n\n  /**\n   * Get Sudoku from sudoku.js\n   */\n  let str = sudoku.generate(60);\n\n  [...str].forEach((value, index) => {\n    temporaryInitArray[index] = value === \".\" ? \"0\" : value;\n  });\n\n  /**\n   * Get the solution from sudoku.js\n   */\n  str = sudoku.solve(str);\n  [...str].forEach((value, index) => {\n    temporarySolvedArray[index] = value;\n  });\n\n  /**\n   * Pass the generated solution and get a unique Sudoku from it!\n   */\n  temporaryInitArray = _generateUniqueSudoku(\n    temporarySolvedArray,\n    difficulty,\n    newDifficulty\n  );\n\n  return [temporaryInitArray, temporarySolvedArray];\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { Colors } from \"../themes/defaultTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  settingButton: {\n    cursor: \"pointer\",\n    width: \"80px\",\n    height: \"120px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    border: \"1px solid rgba(0, 0, 0, 0.23)\",\n    borderRadius: \"5px\",\n\n    \"&:hover\": {\n      backgroundColor: Colors.selectedBackgroundColor,\n      color: Colors.primary,\n    },\n  },\n  settingButtonSelected: {\n    cursor: \"pointer\",\n    width: \"80px\",\n    height: \"120px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: \"5px\",\n    border: `3px solid ${Colors.primary}`,\n\n    backgroundColor: Colors.selectedBackgroundColor,\n    color: Colors.primary,\n  },\n}));\n\nconst SettingButton = ({ value, action, currentSetting }) => {\n  const classes = useStyles();\n  const buttonStyle =\n    currentSetting === value\n      ? classes.settingButtonSelected\n      : classes.settingButton;\n  return (\n    <Grid item>\n      <div className={buttonStyle} onClick={() => action(value)}>\n        <Typography variant=\"h5\">{value}</Typography>\n      </div>\n    </Grid>\n  );\n};\n\nconst SettingPicker = ({ title, options, currentSetting, action }) => {\n  return (\n    <>\n      <Typography variant=\"h4\" color=\"primary\" paragraph>\n        {title}\n      </Typography>\n      <Grid container justify=\"space-between\">\n        {options.map((option, i) => (\n          <SettingButton\n            key={i}\n            value={option}\n            action={action}\n            currentSetting={currentSetting}\n          />\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default SettingPicker;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { Colors } from \"../themes/defaultTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  addRemovePlayerButton: {\n    width: \"120px\",\n    \"&:hover\": {\n      backgroundColor: Colors.selectedBackgroundColor,\n      color: Colors.primary,\n    },\n  },\n}));\n\nconst PlayerTextField = ({ index, player, updatePlayerName }) => {\n  return (\n    <Grid item xs={12}>\n      <TextField\n        variant=\"outlined\"\n        label={`Player ${index + 1}`}\n        fullWidth\n        onChange={(e) => updatePlayerName(e, player.id)}\n        value={player.name}\n      />\n    </Grid>\n  );\n};\n\nconst PlayersForm = ({\n  players,\n  addPlayerField,\n  removePlayerField,\n  updatePlayerName,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Grid item container spacing={2}>\n        <Grid item>\n          <Typography variant=\"h4\" color=\"primary\">\n            Players (4 max)\n          </Typography>\n        </Grid>\n        {players.map((player, i) => (\n          <PlayerTextField\n            key={i}\n            index={i}\n            player={player}\n            updatePlayerName={updatePlayerName}\n          />\n        ))}\n      </Grid>\n      <Grid item container spacing={1} justify=\"space-between\">\n        <Grid item>\n          <Button\n            className={classes.addRemovePlayerButton}\n            variant=\"outlined\"\n            fullWidth\n            disableElevation\n            disabled={players.length >= 4}\n            onClick={addPlayerField}\n          >\n            <Typography variant=\"body1\">Add</Typography>\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            className={classes.addRemovePlayerButton}\n            variant=\"outlined\"\n            fullWidth\n            disableElevation\n            disabled={players.length <= 2}\n            onClick={removePlayerField}\n          >\n            <Typography variant=\"body1\">Remove</Typography>\n          </Button>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default PlayersForm;\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nimport {\n  DIFFICULTY,\n  setDifficulty,\n  setTimerLength,\n  TIMERLENGTH,\n  updatePlayersList,\n} from \"../features/settingsSlice\";\nimport SettingPicker from \"./SettingPicker\";\nimport PlayersForm from \"./PlayersForm\";\n\nconst useStyles = makeStyles((theme) => ({\n  startButton: {\n    height: \"125px\",\n    borderRadius: \"20px\",\n  },\n  settingPickersContainer: {\n    height: 425,\n  },\n}));\n\nconst SettingsContainer = ({\n  difficulty,\n  setDifficulty,\n  timerLength,\n  setTimerLength,\n  players,\n  updatePlayersList,\n  handleStartGameAnimation,\n  createNewGame,\n}) => {\n  const classes = useStyles();\n  const [formPlayers, setFormPlayers] = useState(players);\n\n  const addPlayerField = () => {\n    const nextId = formPlayers[formPlayers.length - 1].id + 1;\n    const newPlayer = {\n      id: nextId,\n      name: \"\",\n      score: 0,\n      current: false,\n      time: 0,\n    };\n    const updatedPlayerForm = [...formPlayers, newPlayer];\n    setFormPlayers(updatedPlayerForm);\n  };\n\n  const removePlayerField = () => {\n    const slicedForm = formPlayers.slice(0, -1);\n    setFormPlayers(slicedForm);\n  };\n\n  const updatePlayerName = (e, playerId) => {\n    const newFormPlayers = [...formPlayers];\n    const updatedPlayer = {\n      ...formPlayers.find((player) => player.id === playerId),\n    };\n    updatedPlayer.name = e.target.value;\n    newFormPlayers[playerId] = updatedPlayer;\n    setFormPlayers(newFormPlayers);\n  };\n\n  const handleStartGame = () => {\n    const finalPlayerList = autoFillNames();\n    updatePlayersList(finalPlayerList);\n    handleStartGameAnimation();\n    createNewGame();\n  };\n\n  const autoFillNames = () => {\n    const finalPlayerList = [];\n    formPlayers.forEach((player, i) => {\n      if (player.name === \"\") {\n        const newPlayer = { ...player };\n        newPlayer.name = `Player ${i + 1}`;\n        finalPlayerList.push(newPlayer);\n      } else {\n        finalPlayerList.push(player);\n      }\n    });\n\n    return finalPlayerList;\n  };\n\n  return (\n    <>\n      <Grid item container spacing={4} justify=\"space-between\">\n        <Grid item container xs={6} spacing={2}>\n          <PlayersForm\n            players={formPlayers}\n            addPlayerField={addPlayerField}\n            removePlayerField={removePlayerField}\n            updatePlayerName={updatePlayerName}\n          />\n        </Grid>\n        <Grid\n          item\n          container\n          xs={6}\n          direction=\"column\"\n          justify=\"space-between\"\n          className={classes.settingPickersContainer}\n        >\n          <Grid item>\n            <SettingPicker\n              title=\"Timer\"\n              options={[\n                TIMERLENGTH.short,\n                TIMERLENGTH.medium,\n                TIMERLENGTH.long,\n              ]}\n              currentSetting={timerLength}\n              action={setTimerLength}\n            />\n          </Grid>\n          <Grid item>\n            <SettingPicker\n              title=\"Difficulty\"\n              options={[DIFFICULTY.e, DIFFICULTY.m, DIFFICULTY.h]}\n              currentSetting={difficulty}\n              action={setDifficulty}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        disableElevation\n        fullWidth\n        size=\"large\"\n        className={classes.startButton}\n        onClick={handleStartGame}\n      >\n        <Typography variant=\"h3\">Start Game</Typography>\n      </Button>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  difficulty: state.settings.difficulty,\n  timerLength: state.settings.timerLength,\n  players: state.settings.players,\n});\n\nconst mapDispatchToProps = {\n  setDifficulty,\n  setTimerLength,\n  updatePlayersList,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\n/**\n * React component for the Game Section\n */\nconst GameSection = (props) => {\n  const { gameArray, cellSelected, initArray, colorFlash } = props;\n  console.log(\"props\", props);\n  const rows = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n\n  /**\n   * Cell Highlight Method 1: Highlight all cells\n   * related to current cell. By related, I mean all\n   * cells in the same row/column/box as the current cell.\n   */\n  // eslint-disable-next-line\n  function _isCellRelatedToSelectedCell(row, column) {\n    if (cellSelected === row * 9 + column) {\n      return true;\n    }\n    let rowOfSelectedCell = Math.floor(cellSelected / 9);\n    let columnOfSelectedCell = cellSelected % 9;\n    if (rowOfSelectedCell === row || columnOfSelectedCell === column) {\n      return true;\n    }\n    return [\n      [0, 3, 0, 3],\n      [0, 3, 3, 6],\n      [0, 3, 6, 9],\n      [3, 6, 0, 3],\n      [3, 6, 3, 6],\n      [3, 6, 6, 9],\n      [6, 9, 0, 3],\n      [6, 9, 3, 6],\n      [6, 9, 6, 9],\n    ].some((array) => {\n      if (\n        rowOfSelectedCell > array[0] - 1 &&\n        row > array[0] - 1 &&\n        rowOfSelectedCell < array[1] &&\n        row < array[1] &&\n        columnOfSelectedCell > array[2] - 1 &&\n        column > array[2] - 1 &&\n        columnOfSelectedCell < array[3] &&\n        column < array[3]\n      )\n        return true;\n      return false;\n    });\n  }\n\n  /**\n   * Cell Highlight Method 2: Highlight all cells with\n   * the same number as in the current cell.\n   */\n  function _isCellSameAsSelectedCell(row, column) {\n    if (cellSelected === row * 9 + column) {\n      return true;\n    }\n    if (gameArray[cellSelected] === \"0\") {\n      return false;\n    }\n  }\n\n  /**\n   * Returns the classes for a cell related to the selected cell.\n   */\n  function _selectedCell(indexOfArray, value, highlight, colorFlash) {\n    if (value !== \"0\") {\n      // sets style of a cell if the cell was empty in initial puzzle\n      if (initArray[indexOfArray] === \"0\") {\n        if (colorFlash) {\n          return (\n            <td\n              className={`game__cell game__cell--userfilled game__cell--${colorFlash}selected`}\n              key={indexOfArray}\n              // onClick={() => props.onClick(indexOfArray)}\n            >\n              {value}\n            </td>\n          );\n        }\n        return (\n          <td\n            className={`game__cell game__cell--userfilled game__cell--${highlight}selected`}\n            key={indexOfArray}\n            // onClick={() => props.onClick(indexOfArray)}\n          >\n            {value}\n          </td>\n        );\n      } else {\n        // set style of cell of pre-filled puzzle cell\n        return (\n          <td\n            className={`game__cell game__cell--filled game__cell--${highlight}selected`}\n            key={indexOfArray}\n            onClick={() => props.onClick(indexOfArray)}\n          >\n            {value}\n          </td>\n        );\n      }\n    } else {\n      // highlight cell on click\n      return (\n        <td\n          className={`game__cell game__cell--${highlight}selected`}\n          key={indexOfArray}\n          onClick={() => props.onClick(indexOfArray)}\n        >\n          {value}\n        </td>\n      );\n    }\n  }\n\n  /**\n   * Returns the classes or a cell not related to the selected cell.\n   */\n  function _unselectedCell(indexOfArray, value) {\n    if (value !== \"0\") {\n      // cannot click correctly filled cells\n      if (initArray[indexOfArray] === \"0\") {\n        return (\n          <td className=\"game__cell game__cell--userfilled\" key={indexOfArray}>\n            {value}\n          </td>\n        );\n      } else {\n        // cannot click pre-filled cells\n        return (\n          <td className=\"game__cell game__cell--filled\" key={indexOfArray}>\n            {value}\n          </td>\n        );\n      }\n    } else {\n      // only allow cell selection once the answer flash goes away\n      const handleClick = (indexOfArray) => {\n        if (!colorFlash) {\n          props.onClick(indexOfArray);\n        }\n      };\n      return (\n        <td\n          className=\"game__cell\"\n          key={indexOfArray}\n          onClick={() => handleClick(indexOfArray)}\n        >\n          {value}\n        </td>\n      );\n    }\n  }\n\n  return (\n    <section className=\"game\">\n      <table className=\"game__board\">\n        <tbody>\n          {rows.map((row) => {\n            return (\n              <tr className=\"game__row\" key={row}>\n                {rows.map((column) => {\n                  const indexOfArray = row * 9 + column;\n                  const value = gameArray[indexOfArray];\n\n                  if (cellSelected === indexOfArray) {\n                    return _selectedCell(\n                      indexOfArray,\n                      value,\n                      \"highlight\",\n                      colorFlash\n                    );\n                  }\n\n                  if (\n                    cellSelected !== -1 &&\n                    _isCellSameAsSelectedCell(row, column)\n                  ) {\n                    return _selectedCell(indexOfArray, value, \"\");\n                  } else {\n                    return _unselectedCell(indexOfArray, value);\n                  }\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </section>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  initArray: state.game.initArray,\n  gameArray: state.game.gameArray,\n  cellSelected: state.game.cellSelected,\n  colorFlash: state.game.colorFlash,\n});\n\nexport default connect(mapStateToProps, null)(GameSection);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Slide from \"@material-ui/core/Slide\";\n\nimport { Colors } from \"../themes/defaultTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  numbersContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    borderRadius: \"20px\",\n    width: \"80px\",\n    margin: \"10px\",\n    padding: \"20px 0\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n  },\n  number: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: 30,\n    height: 50,\n    width: 50,\n\n    \"&:hover\": {\n      backgroundColor: Colors.selectedBackgroundColor,\n      borderRadius: 100,\n      fontWeight: 700,\n      color: Colors.primary,\n      border: `3px solid ${Colors.primary}`,\n    },\n  },\n}));\n\nconst NumberSelector = ({ inGame, onClickNumber }) => {\n  const classes = useStyles();\n  return (\n    <Slide direction=\"left\" in={inGame}>\n      <Paper className={classes.numbersContainer} elevation={1}>\n        {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((number) => {\n          return (\n            <div\n              className={classes.number}\n              onClick={() => onClickNumber(number.toString())}\n            >\n              {number}\n            </div>\n          );\n        })}\n      </Paper>\n    </Slide>\n  );\n};\n\nexport default NumberSelector;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { format } from \"date-fns\";\n\nexport const initialState = {\n  numberSelected: \"0\",\n  gameArray: [],\n  timeGameStarted: format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss\"),\n  cellSelected: -1,\n  initArray: [],\n  won: false,\n  colorFlash: null,\n};\n\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    setNumberSelected: (state, action) => {\n      state.numberSelected = action.payload;\n      return state;\n    },\n    setGameArray: (state, action) => {\n      state.gameArray = action.payload;\n      return state;\n    },\n    setTimeGameStarted: (state) => {\n      state.timeGameStarted = format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss\");\n      return state;\n    },\n    setCellSelected: (state, action) => {\n      state.cellSelected = action.payload;\n      return state;\n    },\n    setInitArray: (state, action) => {\n      state.initArray = action.payload;\n      return state;\n    },\n    setWon: (state, action) => {\n      state.won = action.payload;\n      return state;\n    },\n    setColorFlash: (state, action) => {\n      state.colorFlash = action.payload;\n      return state;\n    },\n  },\n});\n\nexport const {\n  setNumberSelected,\n  setGameArray,\n  setTimeGameStarted,\n  setCellSelected,\n  setInitArray,\n  setWon,\n  setColorFlash,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { connect } from \"react-redux\";\n\nimport { getUniqueSudoku } from \"../solver/UniqueSudoku\";\nimport SettingsContainer from \"./SettingsContainer\";\nimport GameSection from \"./puzzle/layout/GameSection\";\nimport NumberSelector from \"./NumberSelector\";\nimport {\n  resetScore,\n  addPoint,\n  nextPlayer,\n  setTimeTurnStarted,\n} from \"../features/settingsSlice\";\nimport {\n  setCellSelected,\n  setColorFlash,\n  setGameArray,\n  setWon,\n  setInitArray,\n  setNumberSelected,\n  setTimeGameStarted,\n} from \"../features/gameSlice\";\n\nconst useStyles = makeStyles((theme) => ({\n  settingsRoot: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    flexDirection: \"column\",\n    width: \"650px\",\n    height: \"650px\",\n    margin: \"10px\",\n    borderRadius: \"20px\",\n    padding: \"30px\",\n  },\n  puzzleRoot: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"650px\",\n    height: \"650px\",\n    margin: \"10px\",\n    borderRadius: \"20px\",\n  },\n  puzzlePlaceholder: {\n    width: \"90%\",\n    height: \"90%\",\n    border: \"2px solid lightgray\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n}));\n\nconst PuzzleContainer = ({\n  inGame,\n  handleStartGameAnimation,\n  numberSelected,\n  setNumberSelected,\n  setCellSelected,\n  addPoint,\n  setTimeTurnStarted,\n  setColorFlash,\n  initArray,\n  setInitArray,\n  gameArray,\n  setGameArray,\n  setWon,\n  cellSelected,\n  nextPlayer,\n  difficulty,\n  setTimeGameStarted,\n  resetScore,\n}) => {\n  const [solvedArray, setSolvedArray] = useState([]);\n  const [history, setHistory] = useState([]);\n  const classes = useStyles();\n\n  function _createNewGame(newDifficulty) {\n    let [temporaryInitArray, temporarySolvedArray] = getUniqueSudoku(\n      difficulty,\n      newDifficulty\n    );\n\n    setInitArray(temporaryInitArray);\n    setGameArray(temporaryInitArray);\n    setSolvedArray(temporarySolvedArray);\n    setNumberSelected(\"0\");\n    setTimeGameStarted();\n    setCellSelected(-1);\n    setHistory([]);\n    resetScore();\n    setWon(false);\n  }\n\n  function _fillCell(index, value) {\n    if (initArray[index] === \"0\") {\n      // Direct copy results in interesting set of problems, investigate more!\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n\n      // Can't use tempArray here, due to Side effect below!!\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n\n      tempArray[index] = value;\n      setGameArray(tempArray);\n\n      if (_isSolved(index, value)) {\n        setWon(true);\n      }\n    }\n  }\n\n  function onClickCell(indexOfArray) {\n    if (numberSelected !== \"0\") {\n      _userFillCell(indexOfArray, numberSelected);\n    }\n    setCellSelected(indexOfArray);\n  }\n\n  function _userFillCell(index, value) {\n    if (value === solvedArray[index]) {\n      triggerCorrectAnswer(index, value);\n      // _fillCell(index, value);\n    } else {\n      triggerWrongAnswer(index, value);\n    }\n  }\n\n  async function triggerCorrectAnswer(index, value) {\n    addPoint();\n    setTimeTurnStarted();\n    setColorFlash(\"green\");\n    _fillCell(index, value);\n    await setTimeout(() => finishCorrectAnswer(), 1000);\n  }\n\n  // clear flash color and refill cell\n  function finishCorrectAnswer(index, value) {\n    setColorFlash(null);\n    _fillCell(index, value);\n    setCellSelected(-1);\n  }\n\n  async function triggerWrongAnswer(index, value) {\n    setColorFlash(\"red\");\n    _fillCell(index, value);\n    await setTimeout(() => clearWrongAnswer(), 2000);\n  }\n\n  // clear flash color, clear selected cell, erase cell value\n  function clearWrongAnswer() {\n    setColorFlash(null);\n    onClickErase();\n    setCellSelected(-1);\n    nextPlayer();\n    setTimeTurnStarted();\n  }\n\n  function _isSolved(index, value) {\n    if (\n      gameArray.every((cell, cellIndex) => {\n        if (cellIndex === index) return value === solvedArray[cellIndex];\n        else return cell === solvedArray[cellIndex];\n      })\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  function onClickErase() {\n    if (cellSelected !== -1 && gameArray[cellSelected] === \"0\") {\n      _fillCell(cellSelected, \"0\");\n    }\n  }\n\n  function onClickNumber(number) {\n    if (cellSelected !== -1) {\n      _userFillCell(cellSelected, number);\n    }\n  }\n\n  if (inGame) {\n    return (\n      <>\n        <Paper className={classes.puzzleRoot}>\n          <GameSection onClick={(indexOfArray) => onClickCell(indexOfArray)} />\n        </Paper>\n        <NumberSelector\n          inGame={inGame}\n          onClickNumber={(number) => onClickNumber(number)}\n        />\n      </>\n    );\n  }\n\n  return (\n    <Paper className={classes.settingsRoot} elevation={1}>\n      <SettingsContainer\n        createNewGame={_createNewGame}\n        handleStartGameAnimation={handleStartGameAnimation}\n      />\n    </Paper>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  numberSelected: state.game.numberSelected,\n  initArray: state.game.initArray,\n  gameArray: state.game.gameArray,\n  cellSelected: state.game.cellSelected,\n  difficulty: state.settings.difficulty,\n});\n\nconst mapDispatchToProps = {\n  setCellSelected,\n  addPoint,\n  setTimeTurnStarted,\n  setColorFlash,\n  setGameArray,\n  setWon,\n  nextPlayer,\n  setInitArray,\n  setNumberSelected,\n  setTimeGameStarted,\n  resetScore,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PuzzleContainer);\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { connect } from \"react-redux\";\n\nimport { setDifficulty } from \"../../features/settingsSlice\";\nimport Header from \"../Header\";\n\nimport RulesTile from \"../RulesTile\";\nimport InfoContainer from \"../InfoContainer\";\nimport MainContainer from \"../MainContainer\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    padding: \"50px\",\n    justifyContent: \"center\",\n    fontFamily: '\"Karla\", \"san-serif\"',\n  },\n  infoWrapper: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    width: \"400px\",\n    fontFamily: '\"Karla\", \"san-serif\"',\n  },\n}));\n\nconst Game = ({ difficulty, onChangeDifficulty, players }) => {\n  const classes = useStyles();\n  const [inGame, setInGame] = useState(false);\n  const [showRules, setShowRules] = useState(true);\n\n  const handleStartGameAnimation = () => {\n    if (showRules) {\n      setShowRules(!showRules);\n      setTimeout(() => setInGame(!inGame), 300);\n    } else {\n      setInGame(!inGame);\n      setTimeout(() => setShowRules(!showRules), 300);\n    }\n  };\n\n  return (\n    <>\n      <Header onChangeDifficulty={onChangeDifficulty} difficulty={difficulty} />\n      <Switch checked={inGame} onChange={handleStartGameAnimation} />\n      <div className={classes.root}>\n        <div className={classes.infoWrapper}>\n          <RulesTile showRules={showRules} />\n          <InfoContainer inGame={inGame} />\n        </div>\n        <MainContainer\n          inGame={inGame}\n          handleStartGameAnimation={handleStartGameAnimation}\n        />\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  difficulty: state.settings.difficulty,\n  players: state.settings.players,\n});\n\nconst mapDispatchToProps = {\n  setDifficulty,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React from \"react\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { Provider } from \"react-redux\";\r\nimport { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport \"./App.css\";\r\n// import Game from \"./Game\";\r\nimport Game from \"./components/mock/Game\";\r\nimport theme from \"./themes/defaultTheme\";\r\n\r\nimport settingsReducer from \"./features/settingsSlice\";\r\nimport gameReducer from \"./features/gameSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  settings: settingsReducer,\r\n  game: gameReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Provider store={store}>\r\n        <Game />\r\n      </Provider>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
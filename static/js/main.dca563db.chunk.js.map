{"version":3,"sources":["themes/defaultTheme.js","components/TitleTypography.js","components/DifficultyButton.js","components/CoffeeButton.js","features/settings/settingsSlice.js","components/Header.js","reducers.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","secondary","main","grey","titleTheme","typography","fontFamily","useStyles","makeStyles","console","log","title","flexGrow","fontSize","TitleTypography","children","classes","ThemeProvider","Typography","className","color","button","marginRight","cursor","primary","backgroundColor","DifficultyButton","handleClick","difficulty","buttonColor","Button","onClick","CoffeeButton","alert","DIFFICULTY","initialState","settingsSlice","createSlice","name","reducers","setDifficulty","state","action","payload","actions","root","header","borderBottom","minHeight","subheader","subheaderButton","difficultyContainer","mapDispatchToProps","setDifficultyAction","connect","settings","AppBar","position","elevation","Toolbar","size","variant","disableElevation","rootReducer","combineReducers","settingsReducer","store","configureStore","reducer","App","counterSlice","value","increment","decrement","incrementByAmount","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dca563db.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: grey[500],\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport {\n  makeStyles,\n  createMuiTheme,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst titleTheme = createMuiTheme({\n  typography: {\n    fontFamily: '\"Viga\", sans-serif',\n  },\n});\n\nconst useStyles = makeStyles((theme) => {\n  console.log(\"theme\", theme);\n  return {\n    title: {\n      flexGrow: 1,\n      fontSize: 40,\n    },\n  };\n});\n\nconst TitleTypography = ({ children }) => {\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={titleTheme}>\n      <Typography className={classes.title} color=\"primary\">\n        {children}\n      </Typography>\n    </ThemeProvider>\n  );\n};\n\nexport default TitleTypography;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    marginRight: 20,\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.palette.primary.main,\n      backgroundColor: \"transparent\",\n    },\n  },\n}));\n\nconst DifficultyButton = ({ title, handleClick, difficulty }) => {\n  const classes = useStyles();\n  const buttonColor = title === difficulty ? \"primary\" : \"secondary\";\n\n  return (\n    <Button\n      color={buttonColor}\n      className={classes.button}\n      onClick={handleClick}\n    >\n      {title}\n    </Button>\n  );\n};\n\nexport default DifficultyButton;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    marginRight: 20,\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.palette.primary.main,\n      backgroundColor: \"transparent\",\n    },\n  },\n}));\n\nconst CoffeeButton = () => {\n  const classes = useStyles();\n\n  return (\n    <Button\n      color=\"secondary\"\n      className={classes.button}\n      onClick={() => alert(\"you just bought me $1M of coffee!\")}\n    >\n      BUY ME COFFEE\n    </Button>\n  );\n};\n\nexport default CoffeeButton;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const DIFFICULTY = {\n  e: \"EASY\",\n  m: \"MEDIUM\",\n  h: \"HARD\",\n};\n\nexport const initialState = { difficulty: DIFFICULTY.e };\n\nexport const settingsSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  reducers: {\n    setDifficulty: (state, action) => ({\n      ...state,\n      difficulty: action.payload,\n    }),\n  },\n});\n\nexport const { setDifficulty } = settingsSlice.actions;\n\nexport default settingsSlice.reducer;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { connect } from \"react-redux\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\n\nimport TitleTypography from \"./TitleTypography\";\nimport DifficultyButton from \"./DifficultyButton\";\nimport CoffeeButton from \"./CoffeeButton\";\nimport { DIFFICULTY, setDifficulty } from \"../features/settings/settingsSlice\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  header: {\n    borderBottom: \"1px solid lightgray\",\n    minHeight: \"100px\",\n  },\n  subheader: {\n    borderBottom: \"1px solid lightgray\",\n    minHeight: \"50px\",\n  },\n  subheaderButton: {\n    \"&:hover\": {\n      color: theme.palette.primary.main,\n      backgroundColor: \"transparent\",\n    },\n  },\n  difficultyContainer: {\n    flexGrow: 1,\n  },\n}));\n\nconst Header = ({ settings, setDifficultyAction }) => {\n  const { difficulty } = settings;\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"transparent\" elevation={0}>\n        <Toolbar className={classes.header}>\n          <TitleTypography>SUDOKU VERSUS</TitleTypography>\n          <Button\n            size=\"large\"\n            variant=\"contained\"\n            color=\"primary\"\n            disableElevation\n          >\n            Rules\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <AppBar position=\"static\" color=\"transparent\" elevation={0}>\n        <Toolbar className={classes.subheader}>\n          <div className={classes.difficultyContainer}>\n            <DifficultyButton\n              title={DIFFICULTY.e}\n              difficulty={difficulty}\n              handleClick={() => setDifficultyAction(DIFFICULTY.e)}\n            />\n            <DifficultyButton\n              title=\"MEDIUM\"\n              difficulty={difficulty}\n              handleClick={() => setDifficultyAction(DIFFICULTY.m)}\n            />\n            <DifficultyButton\n              title=\"HARD\"\n              difficulty={difficulty}\n              handleClick={() => setDifficultyAction(DIFFICULTY.h)}\n            />\n          </div>\n          <CoffeeButton />\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  settings: state.settings,\n});\n\nconst mapDispatchToProps = { setDifficultyAction: setDifficulty };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport settingsReducer from \"./features/settings/settingsSlice\";\n\nconst rootReducer = combineReducers({\n  settings: settingsReducer,\n});\n\nexport default rootReducer;\n","import React from \"react\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { Provider } from \"react-redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport theme from \"./themes/defaultTheme\";\r\nimport Header from \"./components/Header\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <Header />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}